<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Science on Ryan&#39;s Blog</title>
    <link>https://espe0606.github.io/categories/data-science/</link>
    <description>Recent content in Data Science on Ryan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 11 Dec 2022 17:33:37 +0100</lastBuildDate><atom:link href="https://espe0606.github.io/categories/data-science/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Calculated fields and data manipulation</title>
      <link>https://espe0606.github.io/posts/2022/12/calculated-fields-and-data-manipulation/</link>
      <pubDate>Sun, 11 Dec 2022 17:33:37 +0100</pubDate>
      
      <guid>https://espe0606.github.io/posts/2022/12/calculated-fields-and-data-manipulation/</guid>
      <description>Sometimes we need to manipulate the data stored in a table. For example: retrieving converted, calculated, or reformatted data. This is where calculated fields come in.
Concatenating Fields Concatenate means joining values together (by appending them to each other) to form a single long value. The SELECT statement can help us with this task. In SQL SELECT statements, we can concatenate columns using a special operator. Depending on what DBMS we are using, this can be a plus sign (+) or two pipes (||).</description>
    </item>
    
    <item>
      <title>Methods of filtering data</title>
      <link>https://espe0606.github.io/posts/2022/12/methods-of-filtering-data/</link>
      <pubDate>Fri, 09 Dec 2022 22:23:37 +0100</pubDate>
      
      <guid>https://espe0606.github.io/posts/2022/12/methods-of-filtering-data/</guid>
      <description>The most basic command for filtering data is using SELECT statementâ€™s WHERE clause to specify search conditions. Within a SELECT statement, data is filtered by specifying search criteria in the WHERE clause. The WHERE clause is specified right after the table name (the FROM clause) as follows:
select column_1, column_2 from table where column_1 &amp;gt; 5
Caution:
When using both ORDER BY and WHERE clauses, make sure that ORDER BY comes after the WHERE.</description>
    </item>
    
    <item>
      <title>Basic ideas of SQL, retrieving and sorting data</title>
      <link>https://espe0606.github.io/posts/2022/12/basic-ideas-of-sql-retrieving-and-sorting-data/</link>
      <pubDate>Thu, 08 Dec 2022 13:23:37 +0100</pubDate>
      
      <guid>https://espe0606.github.io/posts/2022/12/basic-ideas-of-sql-retrieving-and-sorting-data/</guid>
      <description>SQL is one kind of DBMS (Database Management System). For the purpose of data analyze, database (DB) is a collection of data stored in some organized fashion. The simplest way to think of it is to imagine a database as a container. The container is simply a physical location to store data, regardless of what that data is or how it is organized. SQL means Structured Query Language which designed specifically for communicating with databases.</description>
    </item>
    
    <item>
      <title>How to deal with missing values?</title>
      <link>https://espe0606.github.io/posts/2022/12/how-to-deal-with-missing-values/</link>
      <pubDate>Tue, 06 Dec 2022 19:46:37 +0100</pubDate>
      
      <guid>https://espe0606.github.io/posts/2022/12/how-to-deal-with-missing-values/</guid>
      <description>Missing data can happen in an unorganized raw dataset when no information is given for one or multiple items. There are various reasons behind this. Sometimes people just feel uncomfortable to share certain kind of personal information in a survey. Other times, the data collector may simply forget to input one number. Dealing with missing data is crucial in data science. Trust me, you will feel frustrated when you click the &amp;ldquo;run&amp;rdquo; button to train your hard built machine learning model and get an &amp;ldquo;MissingValueError&amp;rdquo; response from Python.</description>
    </item>
    
    <item>
      <title>Let&#39;s talk about SGD: Stochastic Gradient Descent</title>
      <link>https://espe0606.github.io/posts/2022/12/lets-talk-about-sgd-stochastic-gradient-descent/</link>
      <pubDate>Fri, 02 Dec 2022 20:50:12 +0100</pubDate>
      
      <guid>https://espe0606.github.io/posts/2022/12/lets-talk-about-sgd-stochastic-gradient-descent/</guid>
      <description>It is well known that the Neural Network model is functioning by cooperation of two major components:
A &amp;ldquo;loss function&amp;rdquo; An &amp;ldquo;optimizer&amp;rdquo; The loss function measures the disparity between the the target&amp;rsquo;s true value and the value the model predicts. There are many kinds of loss function in building the NN model, such as MAE (mean absolute error), MSE(mean-squared error) and Huber loss. I will summarize different usages of them in another post.</description>
    </item>
    
    <item>
      <title>How education level affect Gini index and unemployment rate in Barcelona (Part. 2)</title>
      <link>https://espe0606.github.io/posts/2022/12/how-education-level-affect-gini-index-and-unemployment-rate-in-barcelona-part.-2/</link>
      <pubDate>Thu, 01 Dec 2022 17:02:04 +0100</pubDate>
      
      <guid>https://espe0606.github.io/posts/2022/12/how-education-level-affect-gini-index-and-unemployment-rate-in-barcelona-part.-2/</guid>
      <description>The dataset 2019_academic.csv covers a survey of all residents&amp;rsquo; educational level (from &amp;ldquo;no education&amp;rdquo; to &amp;ldquo;university&amp;rdquo;) in all ten districts of Barcelona city. Data source is from the open data source run by the city government of Barcelona.
After cleaning and organizing the raw data and apply Seaborn for the plotting:
df_edu = df_edu.drop([&amp;#39;Any&amp;#39;,&amp;#39;Codi_Districte&amp;#39;,&amp;#39;Codi_Barri&amp;#39;,&amp;#39;Nom_Barri&amp;#39;], axis=1) df_edu = df_edu[df_edu[&amp;#39;Nivell_academic&amp;#39;]!=&amp;#39;No consta&amp;#39;] df_edu_agg = df_edu.groupby([&amp;#39;Nom_Districte&amp;#39;,&amp;#39;Nivell_academic&amp;#39;]).agg(&amp;#39;sum&amp;#39;).reset_index() plt.figure(figsize=(18,7)) plt.title(&amp;#39;academic level of 10 districts BCN&amp;#39;, fontsize=22) plt.</description>
    </item>
    
    <item>
      <title>How education level affect Gini index and unemployment rate in Barcelona (Part. 1)</title>
      <link>https://espe0606.github.io/posts/2022/12/how-education-level-affect-gini-index-and-unemployment-rate-in-barcelona-part.-1/</link>
      <pubDate>Thu, 01 Dec 2022 07:36:12 +0100</pubDate>
      
      <guid>https://espe0606.github.io/posts/2022/12/how-education-level-affect-gini-index-and-unemployment-rate-in-barcelona-part.-1/</guid>
      <description>I like to walk along the streets of Barcelona. Across various districts of the city, I found that those districts not only distinguish themselves from the building styles, but also from other aspects, such as public facilities, road conditions, prices on menus, even outfits of their residents. This phenomenon makes me wonder how this city is look like from a view of data scientist. So I dug some datasets from the open data source run by the city government of Barcelona.</description>
    </item>
    
    <item>
      <title>Regular expression in dealing with datetime</title>
      <link>https://espe0606.github.io/posts/2022/11/regular-expression-in-dealing-with-datetime/</link>
      <pubDate>Wed, 30 Nov 2022 15:54:56 +0100</pubDate>
      
      <guid>https://espe0606.github.io/posts/2022/11/regular-expression-in-dealing-with-datetime/</guid>
      <description>Last week I encountered a medical dataset that has multiple types of date time format. My task is to correctly identify all of the different date variants encoded in this dataset and to properly normalize and sort the dates.
Some of the variants are like this:
* 04/20/2009; 04/20/09; 4/20/09; 4/3/09 * Mar-20-2009; Mar 20, 2009; March 20, 2009; Mar. 20, 2009; Mar 20 2009; * 20 Mar 2009; 20 March 2009; 20 Mar.</description>
    </item>
    
  </channel>
</rss>

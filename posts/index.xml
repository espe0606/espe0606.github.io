<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Ryan&#39;s Blog</title>
        <link>https://espe0606.github.io/posts/</link>
        <description>Recent content in Posts on Ryan&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Thu, 15 Dec 2022 11:57:33 +0100</lastBuildDate>
        <atom:link href="https://espe0606.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Updating</title>
            <link>https://espe0606.github.io/posts/2022/12/updating/</link>
            <pubDate>Thu, 15 Dec 2022 11:57:33 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/12/updating/</guid>
            <description>I have been working on a LSTM model these days, however the progress is not going very well. There are several problems I still need to figure out.
(Graph source: Towards Data Science,TDS, by Michael Phi)
The model I built seems fit on stocks with more &amp;rsquo;linear&amp;rsquo; price fluctuation, but doesn&amp;rsquo;t work well on those with &amp;rsquo;exponential&amp;rsquo; price fluctuation (no matter upside or downside).
Input parameters are not enough. Right now, I&amp;rsquo;m using time series of past close price for the forecasting.</description>
            <content type="html"><![CDATA[<p>I have been working on a LSTM model these days, however the progress is not going very well. There are several problems I still need to figure out.</p>
<p><img src="/others/lstm.gif" alt="lstm">        (Graph source: Towards Data Science,TDS, by Michael Phi)</p>
<ol>
<li>
<p>The model I built seems fit on stocks with more &rsquo;linear&rsquo; price fluctuation, but doesn&rsquo;t work well on those with &rsquo;exponential&rsquo; price fluctuation (no matter upside or downside).</p>
</li>
<li>
<p>Input parameters are not enough. Right now, I&rsquo;m using time series of past close price for the forecasting. However, there are many more technical indicators I can use, I need more time to test each of them and select those with high predictive power.</p>
</li>
<li>
<p>Fine tuning of hyper parameters. LSTM algorithm is extremely powerful, especially when working on data in sequence with short gaps. However, it still requires many works to be done on setting the hyper parameters. I suppose one fine tuned LSTM model can only work well of a specific stock. This actually makes sense because if you want to profit from trade, it is quite essential that you are familiar with the stock you trade. You have to know some characteristics of it, such as its Beta, drawdown pattern, MA, etc,.</p>
</li>
<li>
<p>I&rsquo;ve tried other models as well, including SVM, Randomforests, KNN and the powerful XGBOOST. But their results are not very encouraging. Or, maybe I can try to convert the predicting targets to a binary target, and use the features from previous day to forecast the outcome of present day. Haven&rsquo;t tried this idea yet, but it seems worth a shot.</p>
</li>
</ol>
<p>I will write a post to introduce the model when it passes my test and shows real ability to help me forecasting the direction of a certain stock.</p>
<p><img src="https://visitor-badge.glitch.me/badge?page_id=espe0606.visitor_counter.issue.1&amp;left_color=green&amp;right_color=red" alt="visitors"></p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
        <item>
            <title>Calculated fields and data manipulation</title>
            <link>https://espe0606.github.io/posts/2022/12/calculated-fields-and-data-manipulation/</link>
            <pubDate>Sun, 11 Dec 2022 17:33:37 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/12/calculated-fields-and-data-manipulation/</guid>
            <description>Sometimes we need to manipulate the data stored in a table. For example: retrieving converted, calculated, or reformatted data. This is where calculated fields come in.
Concatenating Fields Concatenate means joining values together (by appending them to each other) to form a single long value. The SELECT statement can help us with this task. In SQL SELECT statements, we can concatenate columns using a special operator. Depending on what DBMS we are using, this can be a plus sign (+) or two pipes (||).</description>
            <content type="html"><![CDATA[<div align=center>  <!-- 可选的项：right，left，center -->
    <img src="/others/calculate.jpeg" width="800" height="300">  <!-- src处填写路径（本地或网络） width 和 height 就是控制图片的大小的-->
</div>
<p>Sometimes we need to manipulate the data stored in a table. For example: retrieving converted, calculated, or reformatted data. This is where calculated fields come in.</p>
<h3 id="concatenating-fields">Concatenating Fields</h3>
<p>Concatenate means joining values together (by appending them to each other) to form a single long value. The <code>SELECT</code> statement  can help us with this task. In SQL SELECT statements, we can concatenate columns using a special operator. Depending on what DBMS we are using, this can be a plus sign (+) or two pipes (||). For example:<br>
<code>SELECT 'student' + 'class' from registered_students</code><br>
Or we can use a function <code>CONCAT()</code> :<br>
<code>SELECT CONCAT(student, &quot;-&quot;, class) from registered_students</code>
The above SELECT statements concatenate the following elements:</p>
<ul>
<li>The name stored in the <code>student</code> column</li>
<li>A string containing a <code>-</code></li>
<li>The registered class stored <code>class</code> column</li>
</ul>
<p>We can use aliases to give the retrieved information a new column name, using <code>as</code> which always come behind the <code>SELECT</code> statement. For example:<br>
<code>SELECT CONCAT(student, &quot;-&quot;, class) from registered_students as stu_info</code></p>
<blockquote>
<p>Tip:<br>
Aliases have other uses too. Some common uses include renaming a column if the real table column name contains illegal characters (for example, spaces), and expanding column names if the original names are either ambiguous or easily misread.</p>
</blockquote>
<h3 id="mathematical-calcualtions">Mathematical Calcualtions</h3>
<p>SQL is capable of performing math calculations on retrieved data, by simply using math operators between the selected columns. For example:<br>
<code>select prod_id,quantity, item_price,   quantity*item_price as expanded_price   from OrderItems where order_num = 20008</code><br>
Most commonly used math operators are listed in the following pic:</p>
<p><img src="/others/math_op.jpeg" alt="Mathoperators"></p>
<h3 id="functions">Functions</h3>
<p>Before we begin to discuss how to utilize Functions, we should be aware that using SQL functions can be highly problematic.</p>
<p>Why is that? Because functions tend to be very DBMS specific. Very few functions are supported identically by all major DBMSs. Although all types of functionality are usually available in each DBMS, the function name or syntax can differ greatly. If you do decide to use functions, make sure you comment your code well, so that at a later date you (or another developer) will know exactly what SQL implementation you were writing to.</p>
<p>Most SQL implementations support the following types of functions:</p>
<ol>
<li>Text functions are used to manipulate strings of text (for example, trimming or padding values and converting values to upper and lowercase).</li>
<li>Numeric functions are used to perform mathematical operations on numeric data (for example, returning absolute numbers and performing algebraic calculations).</li>
<li>Date and time functions are used to manipulate date and time values and to extract specific components from these values (for example, returning differences between dates, and checking date validity).</li>
<li>System functions return information specific to the DBMS being used (for example, returning user login information).</li>
</ol>
<h4 id="text-manipulation-functions">Text Manipulation Functions</h4>
<p>Following table summerizes the most useful SQL functions to manipulate strings:</p>
<div align=center>  <!-- 可选的项：right，left，center -->
    <img src="/others/stringtable.webp" width="600" height="500">  <!-- src处填写路径（本地或网络） width 和 height 就是控制图片的大小的-->
</div>
<p><code>SOUNDEX</code> is an algorithm that converts any string of text into an alphanumeric pattern describing the phonetic representation of that text. SOUNDEX takes into account similar sounding characters and syllables, enabling strings to be compared by how they sound rather than how they have been typed. Although SOUNDEX is not a SQL concept, most DBMSs do offer SOUNDEX support.</p>
<p>Here is an example using the <code>SOUNDEX</code> function. Suppose you have a customer&rsquo;s name &ldquo;Michelle Green&rdquo; in the Customer table, but what if that were a typo, and the contact actually was supposed to have been &ldquo;Michael Green&rdquo;? Obviously, searching by the correct contact name would return no data, as shown here:<br>
<code>select cust_name, cust_contact from Customers where cust_contact = &quot;Michael Green&quot;</code><br>
Now try the same search using the SOUNDEX() function to match all contact names that <code>sound similar</code> to Michael Green:<br>
<code>select cust_name, cust_contact from Customers where soundex(cust_contact) = soundex(&quot;micheal green&quot;)</code><br>
In this example, the WHERE clause uses the SOUNDEX() function to convert both the cust_contact column value and the search string to their SOUNDEX values. Because Michael Green and Michelle Green sound alike, their SOUNDEX values match, and so the WHERE clause correctly filtered the desired data.</p>
<h4 id="date-and-time-manipulation-functions">Date and Time Manipulation Functions</h4>
<p>Date-time manipulation functions are particularly DBMS specific. Refer to your DBMS documentation for the list of the date-time manipulation functions it supports. Here is a simple example for MySQL and MariaDB:
<code>select * from Orders where year(order_date) = 2012</code><br>
The example shown here extracted and used part of a date (the year). To filter by a specific month the same process could be used, specifying an AND operator and both year and month comparisons.</p>
<h4 id="numeric-manipulation-functions">Numeric Manipulation Functions</h4>
<p>Table beneath lists some of the more commonly used numeric manipulation functions:</p>
<div align=center>  <!-- 可选的项：right，left，center -->
    <img src="/others/numtable.webp" width="600" height="600">  <!-- src处填写路径（本地或网络） width 和 height 就是控制图片的大小的-->
</div>
<p>Refer to your DBMS documentation for a list of the supported mathematical manipulation functions.</p>
<p>REF: SQL in 10 mins by Ben Forta</p>
<p><img src="https://visitor-badge.glitch.me/badge?page_id=espe0606.visitor_counter.issue.10&amp;left_color=green&amp;right_color=red" alt="visitors"></p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
        <item>
            <title>Methods of filtering data</title>
            <link>https://espe0606.github.io/posts/2022/12/methods-of-filtering-data/</link>
            <pubDate>Fri, 09 Dec 2022 22:23:37 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/12/methods-of-filtering-data/</guid>
            <description>The most basic command for filtering data is using SELECT statement’s WHERE clause to specify search conditions. Within a SELECT statement, data is filtered by specifying search criteria in the WHERE clause. The WHERE clause is specified right after the table name (the FROM clause) as follows:
select column_1, column_2 from table where column_1 &amp;gt; 5
Caution:
When using both ORDER BY and WHERE clauses, make sure that ORDER BY comes after the WHERE.</description>
            <content type="html"><![CDATA[<p><img src="/others/sqlf.png" alt="sql_filtering"></p>
<p>The most basic command for filtering data is using  SELECT statement’s WHERE clause to specify search conditions. Within a SELECT statement, data is filtered by specifying search criteria in the WHERE clause. The WHERE clause is specified right after the table name (the FROM clause) as follows:<br>
<code>select column_1, column_2 from table where column_1 &gt; 5</code></p>
<blockquote>
<p>Caution:<br>
When using both ORDER BY and WHERE clauses, make sure that ORDER BY comes <code>after</code> the WHERE.</p>
</blockquote>
<p>Another example:<br>
<code>select column_1, column_2 from table where column_1 != &quot;seller01&quot;</code></p>
<blockquote>
<p>Caution:<br>
!= and &lt;&gt; can usually be used interchangeably. However, not all DBMSs support both forms of the non-equality operator. You&rsquo;d better checked documentation of DBMS for details.</p>
</blockquote>
<p>Example continues, to check for a range of values:<br>
<code>select column_1, column_2 from table where column_2 between 5 and 10</code></p>
<p>Another important application of filtering is finding NULL value. The SELECT statement has a special WHERE clause that can be used to check for columns with NULL values—the <code>IS NULL</code> clause. The syntax looks like this:<br>
<code>select column_1 from table where column_2 is null</code></p>
<p>Now let&rsquo;s see how to combine <code>WHERE</code> to create more sophisticated filtering:</p>
<ol>
<li>
<p>AND:<br>
To filter by more than one column, we use the AND operator to add conditions to WHERE clause. The following code demonstrates this:<br>
<code>select column_1, pcolumn_2, column_3 from table where column_1 = &quot;seller3&quot; and column_2 &lt;= 10</code><br>
only rows matching all the specified conditions should be retrieved.</p>
</li>
<li>
<p>OR:<br>
To retrieve rows that match either condition. In most of DBMSs, if the first condition was met, the row would be retrieved regardless of the second condition. Check the following example:<br>
<code>select column_1, pcolumn_2, column_3 from table where vcolumn_1 = &quot;seller3&quot; or column_3 = &quot;certain item&quot;</code></p>
</li>
</ol>
<h3 id="order-of-evaluation">Order of evaluation</h3>
<ol>
<li>SQL processes AND operators before OR operators.</li>
<li>Parentheses have a higher order of evaluation than either AND or OR operators.</li>
</ol>
<p>For example:<br>
<code>select vend_id, prod_name, prod_price from Products where vend_id = &quot;DLL01&quot; or vend_Id = &quot;BRS01&quot; and prod_price &gt;= 10</code><br>
The result is equal to:<br>
<code>select vend_id, prod_name, prod_price from Products where vend_id = &quot;DLL01&quot; or (vend_Id = &quot;BRS01&quot; and prod_price &gt;= 10)</code></p>
<blockquote>
<p>Tip:<br>
Whenever you write WHERE clauses that use both AND and OR operators, use <code>parentheses</code> to explicitly group operators. Don’t ever rely on the default evaluation order, even if it is exactly what you want.</p>
</blockquote>
<h3 id="in-operator">IN operator</h3>
<p><code>select prod_name, prod_price from Products where vend_id in (&quot;dll01&quot;,&quot;brs01&quot;)  order by prod_name</code><br>
The SELECT statement retrieves all products made by vendor DLL01 and vendor BRS01. The IN operator is followed by a comma-delimited list of valid values, and the entire list must be enclosed within parentheses. Above code has same effect as code beneath:<br>
<code>select prod_name, prod_price from Products where vend_id = &quot;DLL01&quot; or vend_id = &quot;BRS01&quot; order by prod_name</code></p>
<blockquote>
<p>Tips: Advantage of using IN operator:</p>
<ul>
<li>When working with long lists of valid options, the IN operator syntax is far cleaner and easier to read.</li>
<li>The order of evaluation is easier to manage when IN is used in conjunction with other AND and OR operators.</li>
<li>IN operators almost always execute more quickly than lists of OR operators.</li>
<li>The biggest advantage of IN is that the IN operator can contain another <code>SELECT</code> statement, enabling you to build highly dynamic WHERE clauses.</li>
</ul>
</blockquote>
<h3 id="not-operator">NOT operator</h3>
<p>NOT is used to negate whatever condition comes next. For example:<br>
<code>select prod_name, vend_id from Products where not vend_id = &quot;DLL01&quot;</code><br>
The NOT here negates the condition that follows it; so the DBMS matches vend_id to anything that is not DLL01.</p>
<h3 id="wildcards">Wildcards</h3>
<p>Wildcards are special <code>characters</code> used to match parts of a value. Using wildcards can create <code>search patterns</code> that can be compared against data. To use wildcards in search clauses, the LIKE operator must be used. LIKE instructs the DBMS that the following search pattern is to be compared using a wildcard match rather than a straight equality match.</p>
<blockquote>
<p>Tip:<br>
Wildcard searching can only be used with strings, you can’t use wildcards to search fields of non-text datatypes.</p>
</blockquote>
<ol>
<li>The Percent Sign ( % )<br>
Within a search string, % means, match any number of occurrences of any character. For example, to find all products that started with the word Fish, you can issue the following SELECT statement:<br>
<code>select prod_id, prod_name from Products where prod_name like  &quot;fish%&quot;</code><br>
The % tells the DBMS to find out any characters after the word <code>Fish</code>, regardless of how many characters there are. Wildcards can be used anywhere within the search pattern, and multiple wildcards may be used as well:<br>
<code>select prod_id, prod_name from Products where prod_name like &quot;%bean bag%&quot;</code><br>
The search pattern ‘%bean bag%’ means match any value that contains the text bean bag anywhere within it, regardless of any characters before or after that text.</li>
</ol>
<blockquote>
<p>Tips:</p>
<ul>
<li>It is important to note that, In addition to matching one or more characters, % also matches zero characters. % represents zero, one, or more characters at the specified location in the search pattern.</li>
<li>% doesn&rsquo;t match NULL</li>
</ul>
</blockquote>
<ol start="2">
<li>
<p>The Underscore ( _ )<br>
The underscore is used just like %, but instead of matching multiple characters the underscore matches just <code>a single character</code>. Following example uses <code>Two</code> underscore(_):<br>
<code>select prod_name, prod_price from Products where prod_name like &quot;__ inch teddy bear&quot;</code></p>
</li>
<li>
<p>The Brackets ( [] )<br>
The brackets ([]) wildcard is used to specify a set of characters, any one of which must match a character in the specified position (the location of the wildcard). For example, to find all contacts whose names begin with the letter J or the letter M, we can do the following:<br>
<code>select cust_contact from Customers where cust_contact rlike '[JM].*' order by cust_contact</code><br>
<code>rlike</code> here means like in regular expression patterns.<br>
Adding <code>^</code> to negate: <code>[^JM]</code> .</p>
</li>
</ol>
<blockquote>
<p>Tips:</p>
<ol>
<li>Wildcard searches typically take far longer to process than any other search types discussed previously.</li>
<li>Don’t overuse wildcards. If another search operator will do, use it instead.</li>
<li>When you do use wildcards, try to not use them at the beginning of the search pattern unless absolutely necessary. Search patterns that begin with wildcards are the slowest to process.</li>
<li>Pay careful attention to the placement of the wildcard symbols. If they are misplaced, you might not return the data you intended.</li>
</ol>
</blockquote>
<p>REF: SQL in 10 mins by Ben Forta</p>
<p><img src="https://visitor-badge.glitch.me/badge?page_id=espe0606.visitor_counter.issue.9&amp;left_color=green&amp;right_color=red" alt="visitors"></p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
        <item>
            <title>Basic ideas of SQL, retrieving and sorting data</title>
            <link>https://espe0606.github.io/posts/2022/12/basic-ideas-of-sql-retrieving-and-sorting-data/</link>
            <pubDate>Thu, 08 Dec 2022 13:23:37 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/12/basic-ideas-of-sql-retrieving-and-sorting-data/</guid>
            <description>SQL is one kind of DBMS (Database Management System). For the purpose of data analyze, database (DB) is a collection of data stored in some organized fashion. The simplest way to think of it is to imagine a database as a container. The container is simply a physical location to store data, regardless of what that data is or how it is organized. SQL means Structured Query Language which designed specifically for communicating with databases.</description>
            <content type="html"><![CDATA[<p><img src="/others/sql.png" alt="sql"></p>
<p>SQL is one kind of DBMS (Database Management System). For the purpose of data analyze, database (DB) is a collection of data stored in some organized fashion. The simplest way to think of it is to imagine a database as a container. The container is simply a physical location to store data, regardless of what that data is or how it is organized. SQL means Structured Query Language which designed specifically for communicating with databases.</p>
<h2 id="basic-concepts-of-db">Basic concepts of DB</h2>
<h3 id="1-table">1. Table</h3>
<p>When we store data in a container, we first need to create files within the container, then we put related data into specific files, which is called &ldquo;Table&rdquo;. Every table in a database has a name that identifies it. That name is always unique.</p>
<p>We usually create a <code>Schema</code> file to store characteristics and properties that define how data is stored in tables. These include information about what data may be stored, how it is broken up, how individual pieces of information are named, and much more. Normally, schemas are used to describe specific tables within a database, as well as entire databases (and the relationship between tables in them, if any).</p>
<h3 id="2-rowscolumns-and-datatypes-field">2. Rows,Columns and Datatypes Field</h3>
<p>Columns are different fields in a table. All tables are made up of one or more columns. Data in a table is stored in rows; each record saved is stored in its own row.</p>
<blockquote>
<p>Tip:<br>
It is extremely important to break data into multiple columns correctly. For example, city, state, and ZIP code should always be separate columns. By breaking these out, it becomes possible to sort or filter data by specific columns (for example, to find all customers in a particular state or in a particular city).</p>
</blockquote>
<p>Each column in a database has an associated datatype. A datatype defines what type of data the column can contain. Datatypes also help sort data correctly and play an important role in optimizing disk usage. As such, special attention must be given to picking the right datatype when tables are created.</p>
<h3 id="3-primary-keys">3. Primary keys</h3>
<p>Primary key is a column (or set of columns) whose values uniquely identify every row in a table.</p>
<blockquote>
<p>Tip:<br>
Although primary keys are not actually required, most database designers ensure that every table they create has a primary key so that future data manipulation is possible and manageable.</p>
</blockquote>
<p>Any column in a table can be established as the primary key, as long as it meets the following conditions:</p>
<ul>
<li>No two rows can have the same primary key value.</li>
<li>Every row must have a primary key value. (Primary key columns may not allow NULL values.)</li>
<li>Values in primary key columns should never be modified or updated.</li>
<li>Primary key values should never be reused. (If a row is deleted from the table, its primary key may not be assigned to any new rows in the future.)</li>
</ul>
<p>Multiple columns may be used together as a primary key. When multiple columns are used, the rules listed above must apply to all columns, and the values of all columns together must be unique (individual columns need not have unique values)</p>
<h2 id="retrieving-data-with-sql">Retrieving data with SQL</h2>
<p>Single column:<br>
<code>select column_name from table</code><br>
Multiple columns:<br>
<code>select column_1, column_2, column_3 from table</code><br>
All columns:<br>
<code>select * from table</code><br>
Retrieving Distinct values in a Column (return only distinct (different) values.):<br>
<code>select distinct column_name from table</code><br>
Limiting retrieved results:<br>
<code>select prod_name from Products limit 5</code><br>
<code>select prod_name from Products limit 5 offset 3</code></p>
<h2 id="sorting-retrieved-data">Sorting Retrieved Data</h2>
<p>Sorting data of a certain column:<br>
<code>select column_name from table order by column_name</code><br>
Sorting multiple columns:<br>
<code>select column_1, column_2, column_3   from table order by column_2, column_3</code><br>
(if values in column_2 are equal, then sort column_3)<br>
Sorting by column position:<br>
<code>select column_1, column_2, column_3   from table order by 2, 3</code><br>
here <code>order by 2, 3</code> means sort by column_2 and then by column_3. The result is same as the one given by the command above.</p>
<h2 id="specifying-sort-direction">Specifying Sort Direction</h2>
<p>The default sort order is ascending (from A to Z). To sort by descending order, the keyword DESC must be specified.<br>
<code>select column_1, column_2, column_3   from table   order by column_2 desc, column_3 desc</code></p>
<p>REF: SQL in 10 mins by Ben Forta</p>
<p><img src="https://visitor-badge.glitch.me/badge?page_id=espe0606.visitor_counter.issue.8&amp;left_color=green&amp;right_color=red" alt="visitors"></p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
        <item>
            <title>How to deal with missing values?</title>
            <link>https://espe0606.github.io/posts/2022/12/how-to-deal-with-missing-values/</link>
            <pubDate>Tue, 06 Dec 2022 19:46:37 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/12/how-to-deal-with-missing-values/</guid>
            <description>Missing data can happen in an unorganized raw dataset when no information is given for one or multiple items. There are various reasons behind this. Sometimes people just feel uncomfortable to share certain kind of personal information in a survey. Other times, the data collector may simply forget to input one number. Dealing with missing data is crucial in data science. Trust me, you will feel frustrated when you click the &amp;ldquo;run&amp;rdquo; button to train your hard built machine learning model and get an &amp;ldquo;MissingValueError&amp;rdquo; response from Python.</description>
            <content type="html"><![CDATA[<p><img src="/others/pandas.png" alt="panda"></p>
<p>Missing data can happen in an unorganized raw dataset when no information is given for one or multiple items. There are various reasons  behind this. Sometimes people just feel uncomfortable to share certain kind of personal information in a survey. Other times, the data collector may simply forget to input one number. Dealing with missing data is crucial in data science. Trust me, you will feel frustrated when you click the &ldquo;run&rdquo; button to train your hard built machine learning model and get an &ldquo;MissingValueError&rdquo; response from Python.</p>
<p>There is a module called &ldquo;<a href="https://pandas.pydata.org/about/">Pandas</a>&rdquo; in Python can help us taking care of this issue (Can anyone tell me in comment why the developers gave it such a cute name?). It is a <code>must</code> learn module for every data scientist because of its efficiency in processing large datasets.</p>
<p>In Pandas, missing data is mainly represented by
NaN (Not a Number), a special floating-point value recognized by all systems that use the standard IEEE floating-point representation.</p>
<p>There are several functions in Pandas dataframe that can help us:</p>
<p><code>isnull()</code> and <code>notnull()</code>:<br>
Both function help in checking whether a value is NaN or not. These function can also be used in Pandas Series in order to find null values in a series.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>missing_income <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>isnull(data[<span style="color:#e6db74">&#39;income&#39;</span>])
</span></span><span style="display:flex;"><span><span style="color:#75715e">#isnull() return dataframe of Boolean values which are True for NaN values</span>
</span></span><span style="display:flex;"><span>income <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>notnull(data[<span style="color:#e6db74">&#39;income&#39;</span>])
</span></span><span style="display:flex;"><span><span style="color:#75715e">#notnull() return dataframe of Boolean values which are False for NaN values</span>
</span></span></code></pre></div><p><code>dropna()</code>:<br>
This function provides different mathods to drop rows/columns of datasets that have NaN values.</p>
<p>For example, it can drop rows with at least one NaN value: <code>df.dropna()</code>. Or it can drop rows which all values are missing: <code>df.dropna(how ='all')</code>. If you want to drop columns that ave at least one NaN value: <code>df.dropna(axis=1)</code> (Normally not an optimized solution). Check this <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dropna.html">documentation</a> for details.</p>
<p><code>replace()</code>,<code>fillna()</code> and <code>interpolate()</code>:<br>
These three functions substitute NaN value with a value given by themselves. For example: <code>df.fillna(0)</code> will replace all NaN with a 0 or any number given in the parentheses. <code>df.fillna(mathod='pad')</code>will fill NaN with the previous value.</p>
<p>The use of <code>replace()</code> is more general. Literally, it can replace any value in  a dataframe. Here, if we want to replace NaN values, we have to use this form: <code>df.replace(to_replace = np.nan, value = 0)</code>.Click <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.replace.html">here</a> for more information.</p>
<p><code>interpolate()</code> is more like give a method to Pandas so it can compute a value to replace the NaN value. For example: <code>df.interpolate(method ='linear', limit_direction ='forward')</code> will use a forward oriented linear function to compute a value and use it to replace the missing value. Beside the default setting <code>linear</code> method, there are other methods that can fulfill our needs, such as <code>polynomial</code>, <code>cubic</code>, <code>spline</code> etc,. For more details about this function, feel free to click <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.interpolate.html?highlight=interpolate#pandas.DataFrame.interpolate">here</a></p>
<p>Choosing the right function to process missing values is crucial for the success of any kind of data science task. Don&rsquo;t drop any NaN blindfolded. Think carefully, if possible, find reasons to explain why the value is missing. It could be a feature that not match for a certain observation.  In this case, replacing the NaN with the mean value then creating a new column to indicate the status of missing value is more likely a better solution.</p>
<p><img src="/others/extension.png" alt="extension"></p>
<p><img src="https://visitor-badge.glitch.me/badge?page_id=espe0606.visitor_counter.issue.7&amp;left_color=green&amp;right_color=red" alt="visitors"></p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
        <item>
            <title>How will A.I. affect some so called &#39;creative&#39; jobs?</title>
            <link>https://espe0606.github.io/posts/2022/12/how-will-a.i.-affect-some-so-called-creative-jobs/</link>
            <pubDate>Sun, 04 Dec 2022 12:21:37 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/12/how-will-a.i.-affect-some-so-called-creative-jobs/</guid>
            <description>Today I reconnected with an old friend. We knewn each other when I was studying Economics in U.S. She was an associate professor at that time. We started an interesting conversation about A.I. by talking about one professor that we both liked a lot.
She is a CFA certificate holder and now teaching financial course in a top-tier University, but her knowledge on Data Science and A.I. still surprised me. We both believe that not only those blue-collar jobs will be mostly replaced by A.</description>
            <content type="html"><![CDATA[<p>Today I reconnected with an old friend. We knewn each other when I was studying Economics in U.S. She was an associate professor at that time. We started an interesting conversation about A.I. by talking about one professor that we both liked a lot.</p>
<p>She is a CFA certificate holder and now teaching financial course in a top-tier University, but her knowledge on Data Science and A.I. still surprised me. We both believe that  not only those blue-collar jobs will be mostly replaced by A.I. or A.I. controlled machinery, but also the case of the white-collars. How is that? Because A.I. is not only capable of dealing with those repetitive and tedious tasks, but also possess strong ability to provide solutions for given targets under restricted conditions.</p>
<p>For example, recently A.I. already can draw digital paintings. All you need to do is telling it What you want on the picture. Somebody may argue that:&ldquo;Even if the A.I. can paint what we want it to paint, can it paint it good enough?&rdquo; Well, it depends on how you define &ldquo;good&rdquo;. But to my standard, and including most people&rsquo;s standards, A.I. is capable of paint magnificent images. Check this out:</p>
<p><img src="/others/ai_painting.png" alt="ai_painting"></p>
<p>You wouldn&rsquo;t believe me if I told you that this classic delicate oil painting is made by an A.I program: Midjourney. And, yes, this painting won the first place of Colorado State Fair’s annual art competition. So far as I know, some artists are not happy about this result.</p>
<p>You may already imagined that, one day when a company needs an advertisement image, it might not pay a bunch of money to hire a famous artist, and wait three months for the job to be done. I will more likely to simply input several lines of prompts to an A.I.. Five minutes later, the A.I. give the company back a satisfactory picture. How do you think about that?</p>
<p>In addition, A.I. can write novel as well. A newly published A.I. program: ChatGPT can give you a script of story if you tell it how the plot you want the story to be. It can even create characters for certain plot to make the story more vivid. Below is how I tried by myself:</p>
<p><img src="/others/ai_promp.png" alt="ai_prompt"></p>
<p>And below is the story ChatGPT gave me:</p>
<p><img src="/others/ai_story.png" alt="ai_story"></p>
<p>To me, the story is beyond my expectation. I have no doubt that in the near future, companies will no longer need to hire employees for writing articles, instead they only need &ldquo;prompters&rdquo; who know how to give orders to A.I. and interact with it.</p>
<p>I have heard some A.I. scientists are trying to build musician A.I. programs. Given what they had accomplished, it wouldn&rsquo;t surprise me much if a song wrote by an A.I &lsquo;Beethoven&rsquo; win a Grammy award someday.</p>
<p><a href="https://chat.openai.com/chat">Click here</a> if you want to try ChatGPT.</p>
<p><img src="https://visitor-badge.glitch.me/badge?page_id=espe0606.visitor_counter.issue.6&amp;left_color=green&amp;right_color=red" alt="visitors"></p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
        <item>
            <title>Let&#39;s talk about SGD: Stochastic Gradient Descent</title>
            <link>https://espe0606.github.io/posts/2022/12/lets-talk-about-sgd-stochastic-gradient-descent/</link>
            <pubDate>Fri, 02 Dec 2022 20:50:12 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/12/lets-talk-about-sgd-stochastic-gradient-descent/</guid>
            <description>It is well known that the Neural Network model is functioning by cooperation of two major components:
A &amp;ldquo;loss function&amp;rdquo; An &amp;ldquo;optimizer&amp;rdquo; The loss function measures the disparity between the the target&amp;rsquo;s true value and the value the model predicts. There are many kinds of loss function in building the NN model, such as MAE (mean absolute error), MSE(mean-squared error) and Huber loss. I will summarize different usages of them in another post.</description>
            <content type="html"><![CDATA[<p>It is well known that the Neural Network model is functioning by cooperation of two major components:</p>
<ul>
<li>A &ldquo;loss function&rdquo;</li>
<li>An &ldquo;optimizer&rdquo;</li>
</ul>
<p>The loss function measures the disparity between the the target&rsquo;s true value and the value the model predicts. There are many kinds of loss function in building the NN model, such as <code>MAE</code> (mean absolute error), <code>MSE</code>(mean-squared error) and <code>Huber loss</code>. I will summarize different usages of them in another post. For now, just understand that the loss function is a guide for finding the correct values of the model&rsquo;s weights (lower loss is better).</p>
<p>Optimizer is an algorithm that adjusts the weights to <code>minimize the loss</code>. Mathematically, gradient descent was described as following if the model is linear:</p>
<p>$$\begin{align*} \text{repeat}&amp;\text{ until convergence:} \lbrace \newline
w &amp;= w -  \alpha \frac{\partial J(w,b)}{\partial w} \newline
b &amp;= b -  \alpha \frac{\partial J(w,b)}{\partial b}  \newline \rbrace
\end{align*}$$</p>
<p>where, parameters 𝑤 and 𝑏 are updated <code>simultaneously</code>.<br>
The gradient is defined as:</p>
<p>$$
\begin{align}
\frac{\partial J(w,b)}{\partial w}  &amp;= \frac{1}{m} \sum\limits_{i = 0}^{m-1} (f_{w,b}(x^{(i)}) - y^{(i)})x^{(i)} \newline
\frac{\partial J(w,b)}{\partial b}  &amp;= \frac{1}{m} \sum\limits_{i = 0}^{m-1} (f_{w,b}(x^{(i)}) - y^{(i)})\
\end{align}
$$</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/contour.png" alt="&amp;ldquo;Contour plot of sgd&amp;rdquo;" title="Contour plot of sgd"></th>
</tr>
</thead>
</table>
<p>The contour plot above shows the  \(loss\)(𝑤,𝑏)  over a range of  𝑤  and  𝑏 . Loss levels are represented by the rings. Overlayed red arrows, is the path of gradient descent. Here are some things to note:</p>
<ul>
<li>The path makes steady progress toward its goal.</li>
<li>Initial steps are much larger than the steps near the goal.</li>
</ul>
<p>Almost all optimization algorithms used in deep learning belong to stochastic gradient descent. When applying it in building Neural Network models, the math part can be directly left to Tensorflow.</p>
<p>Basically, they are iterative algorithms that train a network in steps. One step of training goes like this:</p>
<ul>
<li>Sample some training data and run it through the network to make predictions.</li>
<li>Measure the loss between the predictions and the true values.</li>
<li>Finally, adjust the weights in a direction that makes the loss smaller.</li>
</ul>
<p>Then just do this over and over until the loss won&rsquo;t decrease any further.</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/sgd.gif" alt="&amp;ldquo;Training with sgd&amp;rdquo;" title="Training with sgd"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Training a neural network with Stochastic Gradient Descent.(Source: Kaggle)</em></td>
</tr>
</tbody>
</table>
<p>From above animation, the pale red dots depict the entire training set, while the solid red dots are the batches. Every time SGD sees a new batch, it will shift the weights (𝑤  the slope and 𝑏 the y-intercept) toward their correct values on that batch. Batch after batch, the line eventually converges to its best fit. You can see that the loss gets smaller as the weights get closer to their true values.</p>
<p>Btw, each iteration&rsquo;s sample of training data is called a <code>batch</code>, while a complete round of the training data is called an <code>epoch</code>.</p>
<p>One more thing we need to pay attention is the learning rate α. The larger α is, the faster gradient decent converge. On the other hand, if α is too large, the gradient decent will diverge and never find the right parameters. Therefore, choosing the right α is crucial. However, one SGD algorithm called <code>Adam</code> has an adaptive learning rate that makes it suitable for most problems without any parameter tuning. This characteristics makes it a great general purpose optimizer.</p>
<p>When a model is built through <code>Tensorflow.keras</code>, adding only a few lines of codes will do the job:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>model<span style="color:#f92672">.</span>compile(optimizer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;adam&#34;</span>, loss<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;mae&#34;</span>,)
</span></span></code></pre></div><p>Certainly the loss function can be substituted by others, and there are several parameters to tune for <code>Adam</code>, I will cover this topic in another post.</p>
<p><img src="https://visitor-badge.glitch.me/badge?page_id=espe0606.visitor_counter.issue.5&amp;left_color=green&amp;right_color=red" alt="visitors"></p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
        <item>
            <title>How education level affect Gini index and unemployment rate in Barcelona (Part. 2)</title>
            <link>https://espe0606.github.io/posts/2022/12/how-education-level-affect-gini-index-and-unemployment-rate-in-barcelona-part.-2/</link>
            <pubDate>Thu, 01 Dec 2022 17:02:04 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/12/how-education-level-affect-gini-index-and-unemployment-rate-in-barcelona-part.-2/</guid>
            <description>The dataset 2019_academic.csv covers a survey of all residents&amp;rsquo; educational level (from &amp;ldquo;no education&amp;rdquo; to &amp;ldquo;university&amp;rdquo;) in all ten districts of Barcelona city. Data source is from the open data source run by the city government of Barcelona.
After cleaning and organizing the raw data and apply Seaborn for the plotting:
df_edu = df_edu.drop([&amp;#39;Any&amp;#39;,&amp;#39;Codi_Districte&amp;#39;,&amp;#39;Codi_Barri&amp;#39;,&amp;#39;Nom_Barri&amp;#39;], axis=1) df_edu = df_edu[df_edu[&amp;#39;Nivell_academic&amp;#39;]!=&amp;#39;No consta&amp;#39;] df_edu_agg = df_edu.groupby([&amp;#39;Nom_Districte&amp;#39;,&amp;#39;Nivell_academic&amp;#39;]).agg(&amp;#39;sum&amp;#39;).reset_index() plt.figure(figsize=(18,7)) plt.title(&amp;#39;academic level of 10 districts BCN&amp;#39;, fontsize=22) plt.</description>
            <content type="html"><![CDATA[<p>The dataset <code>2019_academic.csv</code> covers a survey of all residents&rsquo; educational level (from &ldquo;no education&rdquo; to &ldquo;university&rdquo;) in all ten districts of Barcelona city.  Data source is from the <a href="https://opendata-ajuntament.barcelona.cat/es/">open data source</a> run by the city government of Barcelona.</p>
<p>After cleaning and organizing the raw data and apply <code>Seaborn</code> for the plotting:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>df_edu <span style="color:#f92672">=</span> df_edu<span style="color:#f92672">.</span>drop([<span style="color:#e6db74">&#39;Any&#39;</span>,<span style="color:#e6db74">&#39;Codi_Districte&#39;</span>,<span style="color:#e6db74">&#39;Codi_Barri&#39;</span>,<span style="color:#e6db74">&#39;Nom_Barri&#39;</span>], axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>df_edu <span style="color:#f92672">=</span> df_edu[df_edu[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>]<span style="color:#f92672">!=</span><span style="color:#e6db74">&#39;No consta&#39;</span>]
</span></span><span style="display:flex;"><span>df_edu_agg <span style="color:#f92672">=</span> df_edu<span style="color:#f92672">.</span>groupby([<span style="color:#e6db74">&#39;Nom_Districte&#39;</span>,<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>])<span style="color:#f92672">.</span>agg(<span style="color:#e6db74">&#39;sum&#39;</span>)<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">18</span>,<span style="color:#ae81ff">7</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;academic level of 10 districts BCN&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">22</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Districts&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;number of people&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">=</span>sns<span style="color:#f92672">.</span>scatterplot(data<span style="color:#f92672">=</span>df_edu_agg, x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nom_Districte&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nombre&#39;</span>,hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nivell_academic&#39;</span>, style<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nivell_academic&#39;</span>, s<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>move_legend(ax, <span style="color:#e6db74">&#34;upper left&#34;</span>, bbox_to_anchor<span style="color:#f92672">=</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>))
</span></span></code></pre></div><p>I get this scatterplot:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/edu_scatter.png" alt="&amp;ldquo;Scatterplot of education&amp;rdquo;" title="scatter of education"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Scatterplot of residents&rsquo; educational level</em></td>
</tr>
</tbody>
</table>
<p>Well, this graph doesn&rsquo;t provide enough information for me to see the trend. One option is to narrow the education level to two categories: above or equal high school level and below high school level.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>] <span style="color:#f92672">=</span> df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>]<span style="color:#f92672">.</span>replace([<span style="color:#e6db74">&#39;Estudis universitaris / CFGS grau superior&#39;</span>], <span style="color:#e6db74">&#39;university or higher&#39;</span>)
</span></span><span style="display:flex;"><span>df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>] <span style="color:#f92672">=</span> df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>]<span style="color:#f92672">.</span>replace([<span style="color:#e6db74">&#39;Batxillerat superior / BUP / COU / FPII / CFGM grau mitjà&#39;</span>], <span style="color:#e6db74">&#39;high school&#39;</span>)
</span></span><span style="display:flex;"><span>df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>] <span style="color:#f92672">=</span> df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>]<span style="color:#f92672">.</span>replace([<span style="color:#e6db74">&#34;Estudis primaris / certificat d&#39;escolaritat / EGB&#34;</span>], <span style="color:#e6db74">&#39;elementary school&#39;</span>)
</span></span><span style="display:flex;"><span>df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>] <span style="color:#f92672">=</span> df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>]<span style="color:#f92672">.</span>replace([<span style="color:#e6db74">&#34;Batxillerat elemental / graduat escolar / ESO / FPI&#34;</span>], <span style="color:#e6db74">&#39;middle school&#39;</span>)
</span></span><span style="display:flex;"><span>df_edu_agg <span style="color:#f92672">=</span> df_edu_agg<span style="color:#f92672">.</span>pivot(index <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Nom_Districte&#39;</span>, columns <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Nivell_academic&#39;</span>)
</span></span><span style="display:flex;"><span>df_edu_agg[<span style="color:#e6db74">&#39;above_highschool&#39;</span>]<span style="color:#f92672">=</span> df_edu_agg[<span style="color:#e6db74">&#39;Nombre&#39;</span>][<span style="color:#e6db74">&#39;university or higher&#39;</span>] <span style="color:#f92672">+</span> df_edu_agg[<span style="color:#e6db74">&#39;Nombre&#39;</span>][<span style="color:#e6db74">&#39;high school&#39;</span>]
</span></span><span style="display:flex;"><span>df_edu_agg[<span style="color:#e6db74">&#39;below_highschool&#39;</span>]<span style="color:#f92672">=</span> df_edu_agg[<span style="color:#e6db74">&#39;Nombre&#39;</span>][<span style="color:#e6db74">&#39;Sense estudis&#39;</span>] <span style="color:#f92672">+</span> df_edu_agg[<span style="color:#e6db74">&#39;Nombre&#39;</span>][<span style="color:#e6db74">&#39;elementary school&#39;</span>] <span style="color:#f92672">+</span> df_edu_agg[<span style="color:#e6db74">&#39;Nombre&#39;</span>][<span style="color:#e6db74">&#39;middle school&#39;</span>]
</span></span><span style="display:flex;"><span>df_edu_agg <span style="color:#f92672">=</span> df_edu_agg[[<span style="color:#e6db74">&#39;above_highschool&#39;</span>,<span style="color:#e6db74">&#39;below_highschool&#39;</span>]]<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>df_edu_agg <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>melt(df_edu_agg, id_vars<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Nom_Districte&#34;</span>, var_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Nivell_academic&#34;</span>, value_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Nombre&#34;</span>)
</span></span></code></pre></div><p>Now the head of most updated dataset looks like this:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/organized_edu.png" alt="&amp;ldquo;organized education data&amp;rdquo;" title="organized education data"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Organized education data</em></td>
</tr>
</tbody>
</table>
<p>Now plot the bar graph that shows academic level in 10 districts with following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">18</span>,<span style="color:#ae81ff">7</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;academic level of 10 districts BCN, version 2&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">22</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">=</span>sns<span style="color:#f92672">.</span>barplot(data<span style="color:#f92672">=</span>df_edu_agg, x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nom_Districte&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nombre&#39;</span>,hue <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Nivell_academic&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Districts&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;number of people&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>move_legend(ax, <span style="color:#e6db74">&#34;upper left&#34;</span>, bbox_to_anchor<span style="color:#f92672">=</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>))
</span></span></code></pre></div><table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/edu_bar.png" alt="&amp;ldquo;Bargraph education data&amp;rdquo;" title="Bargraph education data"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Bar graph of education data</em></td>
</tr>
</tbody>
</table>
<p>Graph above give me some hints:</p>
<p>1.The district of Nou Barris is the only district that high education population is less than low education population. It also has the highest unemployment rate.</p>
<p>2.Among other districts, the district of Sarrià-Sant Gervasi has the biggest difference between high-education group and low-education group. It also has the highest Gini index and lowest unemployment rate. This is an interesting finding.</p>
<p>3.The district Eixample has the biggest population that received high education.</p>
<p>Before I move to check correlation between education level and Gini index and correlation between education level and unemployment rate, I think it might be helpful to engineer the data a bit: to use the difference between population of high education group and of low education group.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>final_result1[<span style="color:#e6db74">&#39;diff_edu&#39;</span>] <span style="color:#f92672">=</span> final_result1[<span style="color:#e6db74">&#39;Nombre_x&#39;</span>] <span style="color:#f92672">-</span> final_result1[<span style="color:#e6db74">&#39;Nombre_y&#39;</span>]
</span></span><span style="display:flex;"><span>fig,(ax1,ax2) <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>, sharey<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>,figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">5</span>))
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>regplot(data<span style="color:#f92672">=</span>final_result1,x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Index_Gini&#39;</span>,y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;diff_edu&#39;</span>,ax<span style="color:#f92672">=</span>ax1)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>regplot(data<span style="color:#f92672">=</span>final_result1,x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Pes_atur&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;diff_edu&#39;</span>,ax<span style="color:#f92672">=</span>ax2)
</span></span><span style="display:flex;"><span>ax1<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#39;number difference&#39;</span>)
</span></span><span style="display:flex;"><span>ax2<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#39;number difference&#39;</span>)
</span></span><span style="display:flex;"><span>ax2<span style="color:#f92672">.</span>set_xlabel(<span style="color:#e6db74">&#39;unemployment rate&#39;</span>)
</span></span></code></pre></div><p>The correlation graphs are as following:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/fin_corre.png" alt="&amp;ldquo;correlation graph&amp;rdquo;" title="correlation graph"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Correlation graph of education, Gini index and unemployment rate</em></td>
</tr>
</tbody>
</table>
<p>Now the trend is much more clear. I can conclude that in Barcelona across all 10 districts, the bigger the population difference between group with high educational level and with low educational level, the higher the Gini index, and the lower the unemployment rate.</p>
<p><img src="https://visitor-badge.glitch.me/badge?page_id=espe0606.visitor_counter.issue.4&amp;left_color=green&amp;right_color=red" alt="visitors"></p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
        <item>
            <title>How education level affect Gini index and unemployment rate in Barcelona (Part. 1)</title>
            <link>https://espe0606.github.io/posts/2022/12/how-education-level-affect-gini-index-and-unemployment-rate-in-barcelona-part.-1/</link>
            <pubDate>Thu, 01 Dec 2022 07:36:12 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/12/how-education-level-affect-gini-index-and-unemployment-rate-in-barcelona-part.-1/</guid>
            <description>I like to walk along the streets of Barcelona. Across various districts of the city, I found that those districts not only distinguish themselves from the building styles, but also from other aspects, such as public facilities, road conditions, prices on menus, even outfits of their residents. This phenomenon makes me wonder how this city is look like from a view of data scientist. So I dug some datasets from the open data source run by the city government of Barcelona.</description>
            <content type="html"><![CDATA[<p>I like to walk along the streets of Barcelona. Across various districts of the city, I found that those districts not only distinguish themselves from the building styles, but also from other aspects, such as public facilities, road conditions, prices on menus, even outfits of their residents. This phenomenon makes me wonder how this city is look like from a view of data scientist. So I dug some datasets from the <a href="https://opendata-ajuntament.barcelona.cat/es/">open data source</a> run by the city government of Barcelona.</p>
<p>I chose to look into three categories, namely Gini index, education level and unemployment rates, all across 10 most populated districts of the city, in the year of 2019.</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/ginindex_barcelona.png" alt="&amp;ldquo;Tail of Gini_indexs dataset&amp;rdquo;" title="Tail of Gini_indexs dataset"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Tail of Gini_index dataset</em></td>
</tr>
</tbody>
</table>
<p>I need to drop useless columns and calculate the mean across all districts.</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/codes/ginindex_arrange.png" alt="&amp;ldquo;Organize Gini_indexs dataset&amp;rdquo;" title="organize Gini_indexs dataset"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Get the mean of Gini_index across all districts</em></td>
</tr>
</tbody>
</table>
<p>Obviously the Sarrià-Sant Gervasi district has the highest Gini index, and Sant Andreu has the lowest. Let&rsquo;s plot them to see their difference more clearly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>df_gini_agg <span style="color:#f92672">=</span> df_gini_agg<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>set_theme()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">20</span>,<span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>set_style(<span style="color:#e6db74">&#34;darkgrid&#34;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Gini index across 10 distrcts of BCN&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">22</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>bar(df_gini_agg[<span style="color:#e6db74">&#39;Nom_Districte&#39;</span>], df_gini_agg[<span style="color:#e6db74">&#39;Index_Gini&#39;</span>])
</span></span></code></pre></div><p>Then I get a graph like this:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/ginindex_bar.png" alt="&amp;ldquo;Bargraph of Gini_indexs dataset&amp;rdquo;" title="Bargraph Gini_indexs dataset"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Bargraph of Gini_index across all districts</em></td>
</tr>
</tbody>
</table>
<p>Next I try to find out how the Gini index connects to unemployment rate. At first I need to make sure all 10 districts are included in this data set. Then the data is grouped by two categories, one is month, another is name of district. Let&rsquo;s examine the unemployment rate by month for each district. The code to plot this graph is as following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>df_rate <span style="color:#f92672">=</span> df_rate<span style="color:#f92672">.</span>drop([<span style="color:#e6db74">&#39;Nom_Barri&#39;</span>,<span style="color:#e6db74">&#39;Any&#39;</span>,<span style="color:#e6db74">&#39;Codi_Districte&#39;</span>], axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>df_rate_agg_month <span style="color:#f92672">=</span> df_rate<span style="color:#f92672">.</span>groupby([<span style="color:#e6db74">&#39;Nom_Districte&#39;</span>,<span style="color:#e6db74">&#39;Mes&#39;</span>])<span style="color:#f92672">.</span>agg(<span style="color:#e6db74">&#39;mean&#39;</span>)<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>df_rate_agg_month
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">7</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Unemployment rate across 10 distrcts of BCN each month in 2019&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">22</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Month&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Unemployment rate&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>lineplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Mes&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Pes_atur&#39;</span>, data <span style="color:#f92672">=</span> df_rate_agg_month, hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nom_Districte&#39;</span>, linewidth <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>move_legend(ax, <span style="color:#e6db74">&#34;upper left&#34;</span>, bbox_to_anchor<span style="color:#f92672">=</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>))
</span></span></code></pre></div><p>And the result is:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/linegraph_unem.png" alt="&amp;ldquo;Linegraph of Unemployment dataset&amp;rdquo;" title="Linegraph of Unemployment dataset"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Linegraph of Unemployment dataset</em></td>
</tr>
</tbody>
</table>
<p>For most districts, unemployment rate decrease to lowest in June and July, which suggests that more people are hired during this period, possibly because of the tourism season. Another thing worth notice is the district with lowest unemployment rate is Sarrià-Sant Gervasi, which also possess the highest Gini index. It seems there is some correlation between these two, so let&rsquo;s delve in.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>df_rate_agg_mean <span style="color:#f92672">=</span> df_rate<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;Nom_Districte&#39;</span>)<span style="color:#f92672">.</span>agg(<span style="color:#e6db74">&#39;mean&#39;</span>)<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>merge(df_gini_agg, df_rate_agg_mean, on<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nom_Districte&#39;</span>)
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> result<span style="color:#f92672">.</span>drop([<span style="color:#e6db74">&#39;Codi_Barri&#39;</span>,<span style="color:#e6db74">&#39;Poblacio_16_64_anys&#39;</span>,<span style="color:#e6db74">&#39;Seccio_Censal&#39;</span>],axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">14</span>,<span style="color:#ae81ff">7</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;relationship between index gini and unemployment rate&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">22</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>scatterplot(data<span style="color:#f92672">=</span>result, x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Index_Gini&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Pes_atur&#39;</span>,color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;r&#39;</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>regplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Index_Gini&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Pes_atur&#39;</span>, data<span style="color:#f92672">=</span>result)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Index Gini&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Unemployment rate&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span></code></pre></div><p>Above codes bring me this graph:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/gini_unem.png" alt="&amp;ldquo;Correlation between gini and unemployment rate&amp;rdquo;" title="Correlation between gini and unemployment rate"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Correlation between Gini_index and Unemployment rate</em></td>
</tr>
</tbody>
</table>
<p>Seems there is a negative correlation between these two factors. This discovery is actually the opposite of what i thought. Maybe high Gini index means more rich people, thus they provide more employment opportunities for jobseekers. Now I need to turn to the aspect of education, to find out if it also plays a role in affecting the unemployment rate.(To be continued)</p>
<p><img src="https://visitor-badge.glitch.me/badge?page_id=espe0606.visitor_counter.issue.3&amp;left_color=green&amp;right_color=red" alt="visitors"></p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
        <item>
            <title>Regular expression in dealing with datetime</title>
            <link>https://espe0606.github.io/posts/2022/11/regular-expression-in-dealing-with-datetime/</link>
            <pubDate>Wed, 30 Nov 2022 15:54:56 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/11/regular-expression-in-dealing-with-datetime/</guid>
            <description>Last week I encountered a medical dataset that has multiple types of date time format. My task is to correctly identify all of the different date variants encoded in this dataset and to properly normalize and sort the dates.
Some of the variants are like this:
* 04/20/2009; 04/20/09; 4/20/09; 4/3/09 * Mar-20-2009; Mar 20, 2009; March 20, 2009; Mar. 20, 2009; Mar 20 2009; * 20 Mar 2009; 20 March 2009; 20 Mar.</description>
            <content type="html"><![CDATA[<p>Last week I encountered a medical dataset that has multiple types of date time format. My task is to correctly identify all of the different date variants encoded in this dataset and to properly normalize and sort the dates.</p>
<p>Some of the variants are like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#f92672">*</span> <span style="color:#ae81ff">04</span><span style="color:#f92672">/</span><span style="color:#ae81ff">20</span><span style="color:#f92672">/</span><span style="color:#ae81ff">2009</span>; <span style="color:#ae81ff">04</span><span style="color:#f92672">/</span><span style="color:#ae81ff">20</span><span style="color:#f92672">/</span><span style="color:#ae81ff">09</span>; <span style="color:#ae81ff">4</span><span style="color:#f92672">/</span><span style="color:#ae81ff">20</span><span style="color:#f92672">/</span><span style="color:#ae81ff">09</span>; <span style="color:#ae81ff">4</span><span style="color:#f92672">/</span><span style="color:#ae81ff">3</span><span style="color:#f92672">/</span><span style="color:#ae81ff">09</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span> Mar<span style="color:#f92672">-</span><span style="color:#ae81ff">20</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2009</span>; Mar <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">2009</span>; March <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">2009</span>;  Mar<span style="color:#f92672">.</span> <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">2009</span>; Mar <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">2009</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span> <span style="color:#ae81ff">20</span> Mar <span style="color:#ae81ff">2009</span>; <span style="color:#ae81ff">20</span> March <span style="color:#ae81ff">2009</span>; <span style="color:#ae81ff">20</span> Mar<span style="color:#f92672">.</span> <span style="color:#ae81ff">2009</span>; <span style="color:#ae81ff">20</span> March, <span style="color:#ae81ff">2009</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span> Mar <span style="color:#ae81ff">20</span>th, <span style="color:#ae81ff">2009</span>; Mar <span style="color:#ae81ff">21</span>st, <span style="color:#ae81ff">2009</span>; Mar <span style="color:#ae81ff">22</span>nd, <span style="color:#ae81ff">2009</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span> Feb <span style="color:#ae81ff">2009</span>; Sep <span style="color:#ae81ff">2009</span>; Oct <span style="color:#ae81ff">2010</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span> <span style="color:#ae81ff">6</span><span style="color:#f92672">/</span><span style="color:#ae81ff">2008</span>; <span style="color:#ae81ff">12</span><span style="color:#f92672">/</span><span style="color:#ae81ff">2009</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span> <span style="color:#ae81ff">2009</span>; <span style="color:#ae81ff">2010</span>
</span></span></code></pre></div><p>There are several rules that I need to follow:</p>
<ul>
<li>Assume all dates in xx/xx/xx format are mm/dd/yy</li>
<li>Assume all dates where year is encoded in only two digits are years from the 1900&rsquo;s (e.g. 1/5/89 is January 5th, 1989)</li>
<li>If the day is missing (e.g. 9/2009), assume it is the first day of the month (e.g. September 1, 2009).</li>
<li>If the month is missing (e.g. 2010), assume it is the first of January of that year (e.g. January 1, 2010).</li>
<li>Watch out for potential typos as this is a raw, real-life derived dataset.</li>
</ul>
<p>Firstly we need to import a few modules and convert the <code>txt</code> file to <code>pd.DataFrame</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> dateutil.parser
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> re
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>doc <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;dates.txt&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> file:
</span></span><span style="display:flex;"><span>        doc<span style="color:#f92672">.</span>append(line)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Series(doc)
</span></span></code></pre></div><p>Module <code>dateutil.parser</code> is used to convert strings to datetime objects.</p>
<p>Now we need to find out all date formats that belong to different categories. Regular expression is very handy for this kind of task</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>lower()
</span></span><span style="display:flex;"><span>lst1 <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;(\d{1,2}[-/]\d{1,2}[-/](?:\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">|\d</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">))&#39;</span>)
</span></span><span style="display:flex;"><span>lst2 <span style="color:#f92672">=</span>  df<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;(\d</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">\s(?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*(?:\.\s|,\s|\s)\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">)&#39;</span>)
</span></span><span style="display:flex;"><span>lst3 <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;((?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*(?:-|\s|\.\s)\d</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">(?:,\s|\s|-)\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">)&#39;</span>)            
</span></span><span style="display:flex;"><span>lst4 <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;((?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*(?:\.\s|,\s|\s)\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">)&#39;</span>)
</span></span><span style="display:flex;"><span>lst5 <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;(\d{1,2}/\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">)&#39;</span>)
</span></span><span style="display:flex;"><span>lst6 <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;((?:19|20)\d</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">)&#39;</span>)
</span></span></code></pre></div><p><code>lst1</code> finds date in form like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#ae81ff">0</span>      [<span style="color:#ae81ff">03</span><span style="color:#f92672">/</span><span style="color:#ae81ff">25</span><span style="color:#f92672">/</span><span style="color:#ae81ff">93</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>       [<span style="color:#ae81ff">6</span><span style="color:#f92672">/</span><span style="color:#ae81ff">18</span><span style="color:#f92672">/</span><span style="color:#ae81ff">85</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>        [<span style="color:#ae81ff">7</span><span style="color:#f92672">/</span><span style="color:#ae81ff">8</span><span style="color:#f92672">/</span><span style="color:#ae81ff">71</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span>       [<span style="color:#ae81ff">9</span><span style="color:#f92672">/</span><span style="color:#ae81ff">27</span><span style="color:#f92672">/</span><span style="color:#ae81ff">75</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span>        [<span style="color:#ae81ff">2</span><span style="color:#f92672">/</span><span style="color:#ae81ff">6</span><span style="color:#f92672">/</span><span style="color:#ae81ff">96</span>]
</span></span></code></pre></div><p><code>lst2</code> finds date form as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#ae81ff">125</span>      [<span style="color:#ae81ff">24</span> jan <span style="color:#ae81ff">2001</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">126</span>      [<span style="color:#ae81ff">10</span> sep <span style="color:#ae81ff">2004</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">127</span>      [<span style="color:#ae81ff">26</span> may <span style="color:#ae81ff">1982</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">128</span>     [<span style="color:#ae81ff">28</span> june <span style="color:#ae81ff">2002</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">129</span>      [<span style="color:#ae81ff">06</span> may <span style="color:#ae81ff">1972</span>]
</span></span></code></pre></div><p><code>lst3</code> finds date form like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#ae81ff">194</span>        [april <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">1990</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">195</span>          [may <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">2001</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">196</span>          [feb <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">1994</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">197</span>     [february <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">1981</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">198</span>     [october<span style="color:#f92672">.</span> <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">2013</span>]
</span></span></code></pre></div><p><code>lst4</code> finds date form as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#ae81ff">228</span>    [september <span style="color:#ae81ff">1985</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">229</span>         [june <span style="color:#ae81ff">2011</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">230</span>          [may <span style="color:#ae81ff">1986</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">231</span>          [may <span style="color:#ae81ff">2016</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">232</span>         [july <span style="color:#ae81ff">1977</span>]
</span></span></code></pre></div><p><code>lst5</code> is similar as <code>lst4</code>, both only contain year and month:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#ae81ff">343</span>     [<span style="color:#ae81ff">6</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1998</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">344</span>     [<span style="color:#ae81ff">6</span><span style="color:#f92672">/</span><span style="color:#ae81ff">2005</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">345</span>    [<span style="color:#ae81ff">10</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1973</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">346</span>     [<span style="color:#ae81ff">9</span><span style="color:#f92672">/</span><span style="color:#ae81ff">2005</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">347</span>    [<span style="color:#ae81ff">03</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1980</span>]
</span></span></code></pre></div><p><code>lst6</code> finds dates that only have years:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#ae81ff">455</span>    [<span style="color:#ae81ff">1984</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">456</span>    [<span style="color:#ae81ff">2000</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">457</span>    [<span style="color:#ae81ff">2001</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">458</span>    [<span style="color:#ae81ff">1982</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">459</span>    [<span style="color:#ae81ff">1998</span>]
</span></span></code></pre></div><p>Remember we have some rules to follow, the final date form has to include<code>date,month,year</code>. I defined specialized functions to transform dates in <code>lst4, lst5 and lst6</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add_m_d</span>(value):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;January 1 &#34;</span><span style="color:#f92672">+</span>value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add_d1</span>(value):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> value[:<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>]<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;1/&#39;</span><span style="color:#f92672">+</span>value[<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>:]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add_d2</span>(value):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> value[:<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>]<span style="color:#f92672">+</span><span style="color:#e6db74">&#39; 1, &#39;</span><span style="color:#f92672">+</span>value[<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>:]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add_19</span>(value):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> len(value) <span style="color:#f92672">==</span> <span style="color:#ae81ff">8</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> value[:<span style="color:#ae81ff">6</span>]<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;19&#39;</span><span style="color:#f92672">+</span>value[<span style="color:#ae81ff">6</span>:]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> len(value) <span style="color:#f92672">==</span> <span style="color:#ae81ff">7</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> value[:<span style="color:#ae81ff">5</span>]<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;19&#39;</span><span style="color:#f92672">+</span>value[<span style="color:#ae81ff">5</span>:]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> len(value) <span style="color:#f92672">==</span> <span style="color:#ae81ff">6</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> value[:<span style="color:#ae81ff">4</span>]<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;19&#39;</span><span style="color:#f92672">+</span>value[<span style="color:#ae81ff">4</span>:]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">date_parser</span>(value):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> dateutil<span style="color:#f92672">.</span>parser<span style="color:#f92672">.</span>parse(value)<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><p>Function <code>date_parser</code> is to convert all forms of date into single one <code>Year-Month-Day</code>. Then <code>df.sort_values</code> sorted all date from the earliest to the latest.
The final form is as following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>     date
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">9</span>	<span style="color:#ae81ff">1971</span><span style="color:#f92672">-</span><span style="color:#ae81ff">04</span><span style="color:#f92672">-</span><span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">84</span>	<span style="color:#ae81ff">1971</span><span style="color:#f92672">-</span><span style="color:#ae81ff">05</span><span style="color:#f92672">-</span><span style="color:#ae81ff">18</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>	<span style="color:#ae81ff">1971</span><span style="color:#f92672">-</span><span style="color:#ae81ff">07</span><span style="color:#f92672">-</span><span style="color:#ae81ff">08</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">53</span>	<span style="color:#ae81ff">1971</span><span style="color:#f92672">-</span><span style="color:#ae81ff">07</span><span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">28</span>	<span style="color:#ae81ff">1971</span><span style="color:#f92672">-</span><span style="color:#ae81ff">09</span><span style="color:#f92672">-</span><span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>	<span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">231</span>	<span style="color:#ae81ff">2016</span><span style="color:#f92672">-</span><span style="color:#ae81ff">05</span><span style="color:#f92672">-</span><span style="color:#ae81ff">01</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">141</span>	<span style="color:#ae81ff">2016</span><span style="color:#f92672">-</span><span style="color:#ae81ff">05</span><span style="color:#f92672">-</span><span style="color:#ae81ff">30</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">186</span>	<span style="color:#ae81ff">2016</span><span style="color:#f92672">-</span><span style="color:#ae81ff">10</span><span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">161</span>	<span style="color:#ae81ff">2016</span><span style="color:#f92672">-</span><span style="color:#ae81ff">10</span><span style="color:#f92672">-</span><span style="color:#ae81ff">19</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">413</span>	<span style="color:#ae81ff">2016</span><span style="color:#f92672">-</span><span style="color:#ae81ff">11</span><span style="color:#f92672">-</span><span style="color:#ae81ff">01</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">500</span> rows <span style="color:#960050;background-color:#1e0010">×</span> <span style="color:#ae81ff">1</span> columns
</span></span></code></pre></div><p><img src="https://visitor-badge.glitch.me/badge?page_id=espe0606.visitor_counter.issue.2&amp;left_color=green&amp;right_color=red" alt="visitors"></p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
        <item>
            <title>My first post</title>
            <link>https://espe0606.github.io/posts/2022/11/my-first-post/</link>
            <pubDate>Tue, 29 Nov 2022 14:31:41 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/11/my-first-post/</guid>
            <description>Hello, welcome to my blog!!
My name is Ryan, now living in Barcelona. Previously I worked in Financial sector, especially in PE&amp;amp;VC for more than 10 years, then I wrote a book and got it published in mainland China and HongKong. Now I worked as a freelancer data scientist and will be an enthusiast of A.I and machine learning in the future.
Since most of my time will be dedicated to learn data science, machine learning and neural networks, this blog will be mainly utilized to record my study progress and some interesting topics.</description>
            <content type="html"><![CDATA[<p>Hello, welcome to my blog!!</p>
<p>My name is Ryan, now living in Barcelona. Previously I worked in Financial sector, especially in PE&amp;VC for more than 10 years, then I wrote a book and got it published in mainland China and HongKong. Now I worked as a freelancer data scientist and will be an enthusiast of A.I and machine learning in the future.</p>
<p>Since most of my time will be dedicated to learn data science, machine learning and neural networks, this blog will be mainly utilized to record my study progress and some interesting topics.</p>
<p>Most skills, including writing, need to be polished frequently, or they will fade into nothing, like they never belong to you.</p>
<p>This blog is built upon Hugo and Github, love them.</p>
<p><img src="https://visitor-badge.glitch.me/badge?page_id=espe0606.visitor_counter.issue.1&amp;left_color=green&amp;right_color=red" alt="visitors"></p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
    </channel>
</rss>

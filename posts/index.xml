<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Ryan&#39;s Blog</title>
        <link>https://espe0606.github.io/posts/</link>
        <description>Recent content in Posts on Ryan&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 04 Dec 2022 12:21:37 +0100</lastBuildDate>
        <atom:link href="https://espe0606.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>How will A.I. affect some so called &#39;creative&#39; jobs?</title>
            <link>https://espe0606.github.io/posts/2022/12/how-will-a.i.-affect-some-so-called-creative-jobs/</link>
            <pubDate>Sun, 04 Dec 2022 12:21:37 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/12/how-will-a.i.-affect-some-so-called-creative-jobs/</guid>
            <description>Today I reconnected with an old friend. We knewn each other when I was studying Economics in U.S. She was an associate professor at that time. We started an interesting conversation about A.I. by talking about one professor that we both liked a lot.
She is a CFA certificate holder and now teaching financial course in a top-tier University, but her knowledge on Data Science and A.I. still surprised me. We both blieve that not only those blue-collar jobs will be mostly replaced by A.</description>
            <content type="html"><![CDATA[<p>Today I reconnected with an old friend. We knewn each other when I was studying Economics in U.S. She was an associate professor at that time. We started an interesting conversation about A.I. by talking about one professor that we both liked a lot.</p>
<p>She is a CFA certificate holder and now teaching financial course in a top-tier University, but her knowledge on Data Science and A.I. still surprised me. We both blieve that  not only those blue-collar jobs will be mostly replaced by A.I. or A.I. controlled machinery, but also the case of the white-collars. How is that? Because A.I. is not only capable of dealing with those repetitive and tedious tasks, but also possess strong ability to provide solutions for given targets under restricted conditions.</p>
<p>For example, recently A.I. already can draw digital paintings. All you need to do is telling it What you want on the picture. Somebody may argue that:&ldquo;Even if the A.I. can paint what we want it to paint, can it paint it good enough?&rdquo; Well, it depends on how you define &ldquo;good&rdquo;. But to my standard, and including most people&rsquo;s standards, A.I. is capable of paint magnificent images. Check this out:</p>
<p><img src="/others/ai_painting.png" alt="ai_painting"></p>
<p>You wouldn&rsquo;t believe me if I told you that this classc delicate oil painting is made by an A.I program: Midjourney. And, yes, this painting won the first place of Colorado State Fair‚Äôs annual art competition. So far as I know, some artists are not happy about this.</p>
<p>You may already imagined that, one day when a company needs an advertisement image, it might not pay a bounch of money to hire a famous artist, and wait three months for the job done. But will input several lines of prompts to an A.I., five minutes later, the A.I. give you back a satisfactury picutre. How do you think about that?</p>
<p>In addition, A.I. can write novel as well. A newly punblished A.I. program: ChatGPT can give you a sript of story if you tell it how the plot you want the story to be. It can even creat characters for certain plot to make the story more vivid. Below is how I tried by myself:</p>
<p><img src="/others/ai_promp.png" alt="ai_prompt"></p>
<p>And below is the story ChatGPT gave me:</p>
<p><img src="/others/ai_story.png" alt="ai_story"></p>
<p>To me, the story is beyond my expectation. I have no doubt that in the near future, compnies will no longer need to hire employees for writing articals, instead they only need &ldquo;prompters&rdquo; who know how to give orders to A.I. and interarct with it.</p>
<p>I have heared some A.I. scientists are trying to build musician A.I. programs. Given what they had accomplished, it wouldn&rsquo;t surprise me much if a song wrote by an A.I &lsquo;Beethoven&rsquo; won a Grammy award.</p>
<p><a href="https://chat.openai.com/chat">Click here</a> if you want to try ChatGPT.</p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
        <item>
            <title>Let&#39;s talk about SGD: Stochastic Gradient Descent</title>
            <link>https://espe0606.github.io/posts/2022/12/lets-talk-about-sgd-stochastic-gradient-descent/</link>
            <pubDate>Fri, 02 Dec 2022 20:50:12 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/12/lets-talk-about-sgd-stochastic-gradient-descent/</guid>
            <description>It is well known that the Neural Network model is functioning by cooperation of two major components:
A &amp;ldquo;loss function&amp;rdquo; An &amp;ldquo;optimizer&amp;rdquo; The loss function measures the disparity between the the target&amp;rsquo;s true value and the value the model predicts. There are many kinds of loss function in building the NN model, such as MAE (mean absolute error), MSE(mean-squared error) and Huber loss. I will summarize different usages of them in another post.</description>
            <content type="html"><![CDATA[<p>It is well known that the Neural Network model is functioning by cooperation of two major components:</p>
<ul>
<li>A &ldquo;loss function&rdquo;</li>
<li>An &ldquo;optimizer&rdquo;</li>
</ul>
<p>The loss function measures the disparity between the the target&rsquo;s true value and the value the model predicts. There are many kinds of loss function in building the NN model, such as <code>MAE</code> (mean absolute error), <code>MSE</code>(mean-squared error) and <code>Huber loss</code>. I will summarize different usages of them in another post. For now, just understand that the loss function is a guide for finding the correct values of the model&rsquo;s weights (lower loss is better).</p>
<p>Optimizer is an algorithm that adjusts the weights to <code>minimize the loss</code>. Mathematically, gradient descent was described as following if the model is linear:</p>
<p>$$\begin{align*} \text{repeat}&amp;\text{ until convergence:} \lbrace \newline
w &amp;= w -  \alpha \frac{\partial J(w,b)}{\partial w} \newline
b &amp;= b -  \alpha \frac{\partial J(w,b)}{\partial b}  \newline \rbrace
\end{align*}$$</p>
<p>where, parameters ùë§ and ùëè are updated <code>simultaneously</code>.<br>
The gradient is defined as:</p>
<p>$$
\begin{align}
\frac{\partial J(w,b)}{\partial w}  &amp;= \frac{1}{m} \sum\limits_{i = 0}^{m-1} (f_{w,b}(x^{(i)}) - y^{(i)})x^{(i)} \newline
\frac{\partial J(w,b)}{\partial b}  &amp;= \frac{1}{m} \sum\limits_{i = 0}^{m-1} (f_{w,b}(x^{(i)}) - y^{(i)})\
\end{align}
$$</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/contour.png" alt="&amp;ldquo;Contour plot of sgd&amp;rdquo;" title="Contour plot of sgd"></th>
</tr>
</thead>
</table>
<p>The contour plot above shows the  \(loss\)(ùë§,ùëè)  over a range of  ùë§  and  ùëè . Loss levels are represented by the rings. Overlayed red arrows, is the path of gradient descent. Here are some things to note:</p>
<ul>
<li>The path makes steady progress toward its goal.</li>
<li>Initial steps are much larger than the steps near the goal.</li>
</ul>
<p>Almost all optimization algorithms used in deep learning belong to stochastic gradient descent. When applying it in building Neural Network models, the math part can be directly left to Tensorflow.</p>
<p>Basically, they are iterative algorithms that train a network in steps. One step of training goes like this:</p>
<ul>
<li>Sample some training data and run it through the network to make predictions.</li>
<li>Measure the loss between the predictions and the true values.</li>
<li>Finally, adjust the weights in a direction that makes the loss smaller.</li>
</ul>
<p>Then just do this over and over until the loss won&rsquo;t decrease any further.</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/sgd.gif" alt="&amp;ldquo;Training with sgd&amp;rdquo;" title="Training with sgd"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Training a neural network with Stochastic Gradient Descent.(Source: Kaggle)</em></td>
</tr>
</tbody>
</table>
<p>From above animation, the pale red dots depict the entire training set, while the solid red dots are the batches. Every time SGD sees a new batch, it will shift the weights (ùë§  the slope and ùëè the y-intercept) toward their correct values on that batch. Batch after batch, the line eventually converges to its best fit. You can see that the loss gets smaller as the weights get closer to their true values.</p>
<p>Btw, each iteration&rsquo;s sample of training data is called a <code>batch</code>, while a complete round of the training data is called an <code>epoch</code>.</p>
<p>One more thing we need to pay attention is the learning rate Œ±. The larger Œ± is, the faster gradient decent converge. On the other hand, if Œ± is too large, the gradient decent will diverge and never find the right parameters. Therefore, choosing the right Œ± is crucial. However, one SGD algorithm called <code>Adam</code> has an adaptive learning rate that makes it suitable for most problems without any parameter tuning. This characteristics makes it a great general purpose optimizer.</p>
<p>When a model is built through <code>Tensorflow.keras</code>, adding only a few lines of codes will do the job:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>model<span style="color:#f92672">.</span>compile(optimizer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;adam&#34;</span>, loss<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;mae&#34;</span>,)
</span></span></code></pre></div><p>Certainly the loss function can be substituted by others, and there are several parameters to tune for <code>Adam</code>, I will cover this topic in another post.</p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
        <item>
            <title>How education level affect Gini index and unemployment rate in Barcelona (Part. 2)</title>
            <link>https://espe0606.github.io/posts/2022/12/how-education-level-affect-gini-index-and-unemployment-rate-in-barcelona-part.-2/</link>
            <pubDate>Thu, 01 Dec 2022 17:02:04 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/12/how-education-level-affect-gini-index-and-unemployment-rate-in-barcelona-part.-2/</guid>
            <description>The dataset 2019_academic.csv covers a survey of all residents&amp;rsquo; educational level (from &amp;ldquo;no education&amp;rdquo; to &amp;ldquo;university&amp;rdquo;) in all ten districts of Barcelona city. Data source is from the open data source run by the city government of Barcelona.
After cleaning and organizing the raw data and apply Seaborn for the plotting:
df_edu = df_edu.drop([&amp;#39;Any&amp;#39;,&amp;#39;Codi_Districte&amp;#39;,&amp;#39;Codi_Barri&amp;#39;,&amp;#39;Nom_Barri&amp;#39;], axis=1) df_edu = df_edu[df_edu[&amp;#39;Nivell_academic&amp;#39;]!=&amp;#39;No consta&amp;#39;] df_edu_agg = df_edu.groupby([&amp;#39;Nom_Districte&amp;#39;,&amp;#39;Nivell_academic&amp;#39;]).agg(&amp;#39;sum&amp;#39;).reset_index() plt.figure(figsize=(18,7)) plt.title(&amp;#39;academic level of 10 districts BCN&amp;#39;, fontsize=22) plt.</description>
            <content type="html"><![CDATA[<p>The dataset <code>2019_academic.csv</code> covers a survey of all residents&rsquo; educational level (from &ldquo;no education&rdquo; to &ldquo;university&rdquo;) in all ten districts of Barcelona city.  Data source is from the <a href="https://opendata-ajuntament.barcelona.cat/es/">open data source</a> run by the city government of Barcelona.</p>
<p>After cleaning and organizing the raw data and apply <code>Seaborn</code> for the plotting:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>df_edu <span style="color:#f92672">=</span> df_edu<span style="color:#f92672">.</span>drop([<span style="color:#e6db74">&#39;Any&#39;</span>,<span style="color:#e6db74">&#39;Codi_Districte&#39;</span>,<span style="color:#e6db74">&#39;Codi_Barri&#39;</span>,<span style="color:#e6db74">&#39;Nom_Barri&#39;</span>], axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>df_edu <span style="color:#f92672">=</span> df_edu[df_edu[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>]<span style="color:#f92672">!=</span><span style="color:#e6db74">&#39;No consta&#39;</span>]
</span></span><span style="display:flex;"><span>df_edu_agg <span style="color:#f92672">=</span> df_edu<span style="color:#f92672">.</span>groupby([<span style="color:#e6db74">&#39;Nom_Districte&#39;</span>,<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>])<span style="color:#f92672">.</span>agg(<span style="color:#e6db74">&#39;sum&#39;</span>)<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">18</span>,<span style="color:#ae81ff">7</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;academic level of 10 districts BCN&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">22</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Districts&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;number of people&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">=</span>sns<span style="color:#f92672">.</span>scatterplot(data<span style="color:#f92672">=</span>df_edu_agg, x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nom_Districte&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nombre&#39;</span>,hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nivell_academic&#39;</span>, style<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nivell_academic&#39;</span>, s<span style="color:#f92672">=</span><span style="color:#ae81ff">100</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>move_legend(ax, <span style="color:#e6db74">&#34;upper left&#34;</span>, bbox_to_anchor<span style="color:#f92672">=</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>))
</span></span></code></pre></div><p>I get this scatterplot:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/edu_scatter.png" alt="&amp;ldquo;Scatterplot of education&amp;rdquo;" title="scatter of education"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Scatterplot of residents&rsquo; educational level</em></td>
</tr>
</tbody>
</table>
<p>Well, this graph doesn&rsquo;t provide enough information for me to see the trend. One option is to narrow the education level to two categories: above or equal high school level and below high school level.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>] <span style="color:#f92672">=</span> df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>]<span style="color:#f92672">.</span>replace([<span style="color:#e6db74">&#39;Estudis universitaris / CFGS grau superior&#39;</span>], <span style="color:#e6db74">&#39;university or higher&#39;</span>)
</span></span><span style="display:flex;"><span>df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>] <span style="color:#f92672">=</span> df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>]<span style="color:#f92672">.</span>replace([<span style="color:#e6db74">&#39;Batxillerat superior / BUP / COU / FPII / CFGM grau mitj√†&#39;</span>], <span style="color:#e6db74">&#39;high school&#39;</span>)
</span></span><span style="display:flex;"><span>df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>] <span style="color:#f92672">=</span> df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>]<span style="color:#f92672">.</span>replace([<span style="color:#e6db74">&#34;Estudis primaris / certificat d&#39;escolaritat / EGB&#34;</span>], <span style="color:#e6db74">&#39;elementary school&#39;</span>)
</span></span><span style="display:flex;"><span>df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>] <span style="color:#f92672">=</span> df_edu_agg[<span style="color:#e6db74">&#39;Nivell_academic&#39;</span>]<span style="color:#f92672">.</span>replace([<span style="color:#e6db74">&#34;Batxillerat elemental / graduat escolar / ESO / FPI&#34;</span>], <span style="color:#e6db74">&#39;middle school&#39;</span>)
</span></span><span style="display:flex;"><span>df_edu_agg <span style="color:#f92672">=</span> df_edu_agg<span style="color:#f92672">.</span>pivot(index <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Nom_Districte&#39;</span>, columns <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Nivell_academic&#39;</span>)
</span></span><span style="display:flex;"><span>df_edu_agg[<span style="color:#e6db74">&#39;above_highschool&#39;</span>]<span style="color:#f92672">=</span> df_edu_agg[<span style="color:#e6db74">&#39;Nombre&#39;</span>][<span style="color:#e6db74">&#39;university or higher&#39;</span>] <span style="color:#f92672">+</span> df_edu_agg[<span style="color:#e6db74">&#39;Nombre&#39;</span>][<span style="color:#e6db74">&#39;high school&#39;</span>]
</span></span><span style="display:flex;"><span>df_edu_agg[<span style="color:#e6db74">&#39;below_highschool&#39;</span>]<span style="color:#f92672">=</span> df_edu_agg[<span style="color:#e6db74">&#39;Nombre&#39;</span>][<span style="color:#e6db74">&#39;Sense estudis&#39;</span>] <span style="color:#f92672">+</span> df_edu_agg[<span style="color:#e6db74">&#39;Nombre&#39;</span>][<span style="color:#e6db74">&#39;elementary school&#39;</span>] <span style="color:#f92672">+</span> df_edu_agg[<span style="color:#e6db74">&#39;Nombre&#39;</span>][<span style="color:#e6db74">&#39;middle school&#39;</span>]
</span></span><span style="display:flex;"><span>df_edu_agg <span style="color:#f92672">=</span> df_edu_agg[[<span style="color:#e6db74">&#39;above_highschool&#39;</span>,<span style="color:#e6db74">&#39;below_highschool&#39;</span>]]<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>df_edu_agg <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>melt(df_edu_agg, id_vars<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Nom_Districte&#34;</span>, var_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Nivell_academic&#34;</span>, value_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Nombre&#34;</span>)
</span></span></code></pre></div><p>Now the head of most updated dataset looks like this:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/organized_edu.png" alt="&amp;ldquo;organized education data&amp;rdquo;" title="organized education data"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Organized education data</em></td>
</tr>
</tbody>
</table>
<p>Now plot the bar graph that shows academic level in 10 districts with following code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">18</span>,<span style="color:#ae81ff">7</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;academic level of 10 districts BCN, version 2&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">22</span>)
</span></span><span style="display:flex;"><span>ax<span style="color:#f92672">=</span>sns<span style="color:#f92672">.</span>barplot(data<span style="color:#f92672">=</span>df_edu_agg, x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nom_Districte&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nombre&#39;</span>,hue <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;Nivell_academic&#39;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Districts&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;number of people&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>move_legend(ax, <span style="color:#e6db74">&#34;upper left&#34;</span>, bbox_to_anchor<span style="color:#f92672">=</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>))
</span></span></code></pre></div><table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/edu_bar.png" alt="&amp;ldquo;Bargraph education data&amp;rdquo;" title="Bargraph education data"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Bar graph of education data</em></td>
</tr>
</tbody>
</table>
<p>Graph above give me some hints:</p>
<p>1.The district of Nou Barris is the only district that high education population is less than low education population. It also has the highest unemployment rate.</p>
<p>2.Among other districts, the district of Sarri√†-Sant Gervasi has the biggest difference between high-education group and low-education group. It also has the highest Gini index and lowest unemployment rate. This is an interesting finding.</p>
<p>3.The district Eixample has the biggest population that received high education.</p>
<p>Before I move to check correlation between education level and Gini index and correlation between education level and unemployment rate, I think it might be helpful to engineer the data a bit: to use the difference between population of high education group and of low education group.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>final_result1[<span style="color:#e6db74">&#39;diff_edu&#39;</span>] <span style="color:#f92672">=</span> final_result1[<span style="color:#e6db74">&#39;Nombre_x&#39;</span>] <span style="color:#f92672">-</span> final_result1[<span style="color:#e6db74">&#39;Nombre_y&#39;</span>]
</span></span><span style="display:flex;"><span>fig,(ax1,ax2) <span style="color:#f92672">=</span> plt<span style="color:#f92672">.</span>subplots(<span style="color:#ae81ff">1</span>,<span style="color:#ae81ff">2</span>, sharey<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>,figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">11</span>,<span style="color:#ae81ff">5</span>))
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>regplot(data<span style="color:#f92672">=</span>final_result1,x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Index_Gini&#39;</span>,y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;diff_edu&#39;</span>,ax<span style="color:#f92672">=</span>ax1)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>regplot(data<span style="color:#f92672">=</span>final_result1,x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Pes_atur&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;diff_edu&#39;</span>,ax<span style="color:#f92672">=</span>ax2)
</span></span><span style="display:flex;"><span>ax1<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#39;number difference&#39;</span>)
</span></span><span style="display:flex;"><span>ax2<span style="color:#f92672">.</span>set_ylabel(<span style="color:#e6db74">&#39;number difference&#39;</span>)
</span></span><span style="display:flex;"><span>ax2<span style="color:#f92672">.</span>set_xlabel(<span style="color:#e6db74">&#39;unemployment rate&#39;</span>)
</span></span></code></pre></div><p>The correlation graphs are as following:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/fin_corre.png" alt="&amp;ldquo;correlation graph&amp;rdquo;" title="correlation graph"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Correlation graph of education, Gini index and unemployment rate</em></td>
</tr>
</tbody>
</table>
<p>Now the trend is much more clear. I can conclude that in Barcelona across all 10 districts, the bigger the population difference between group with high educational level and with low educational level, the higher the Gini index, and the lower the unemployment rate.</p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
        <item>
            <title>How education level affect Gini index and unemployment rate in Barcelona (Part. 1)</title>
            <link>https://espe0606.github.io/posts/2022/12/how-education-level-affect-gini-index-and-unemployment-rate-in-barcelona-part.-1/</link>
            <pubDate>Thu, 01 Dec 2022 07:36:12 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/12/how-education-level-affect-gini-index-and-unemployment-rate-in-barcelona-part.-1/</guid>
            <description>I like to walk along the streets of Barcelona. Across various districts of the city, I found that those districts not only distinguish themselves from the building styles, but also from other aspects, such as public facilities, road conditions, prices on menus, even outfits of their residents. This phenomenon makes me wonder how this city is look like from a view of data scientist. So I dug some datasets from the open data source run by the city government of Barcelona.</description>
            <content type="html"><![CDATA[<p>I like to walk along the streets of Barcelona. Across various districts of the city, I found that those districts not only distinguish themselves from the building styles, but also from other aspects, such as public facilities, road conditions, prices on menus, even outfits of their residents. This phenomenon makes me wonder how this city is look like from a view of data scientist. So I dug some datasets from the <a href="https://opendata-ajuntament.barcelona.cat/es/">open data source</a> run by the city government of Barcelona.</p>
<p>I chose to look into three categories, namely Gini index, education level and unemployment rates, all across 10 most populated districts of the city, in the year of 2019.</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/ginindex_barcelona.png" alt="&amp;ldquo;Tail of Gini_indexs dataset&amp;rdquo;" title="Tail of Gini_indexs dataset"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Tail of Gini_index dataset</em></td>
</tr>
</tbody>
</table>
<p>I need to drop useless columns and calculate the mean across all districts.</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/codes/ginindex_arrange.png" alt="&amp;ldquo;Organize Gini_indexs dataset&amp;rdquo;" title="organize Gini_indexs dataset"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Get the mean of Gini_index across all districts</em></td>
</tr>
</tbody>
</table>
<p>Obviously the Sarri√†-Sant Gervasi district has the highest Gini index, and Sant Andreu has the lowest. Let&rsquo;s plot them to see their difference more clearly.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>df_gini_agg <span style="color:#f92672">=</span> df_gini_agg<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>set_theme()
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">20</span>,<span style="color:#ae81ff">6</span>))
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>set_style(<span style="color:#e6db74">&#34;darkgrid&#34;</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Gini index across 10 distrcts of BCN&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">22</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>bar(df_gini_agg[<span style="color:#e6db74">&#39;Nom_Districte&#39;</span>], df_gini_agg[<span style="color:#e6db74">&#39;Index_Gini&#39;</span>])
</span></span></code></pre></div><p>Then I get a graph like this:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/ginindex_bar.png" alt="&amp;ldquo;Bargraph of Gini_indexs dataset&amp;rdquo;" title="Bargraph Gini_indexs dataset"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Bargraph of Gini_index across all districts</em></td>
</tr>
</tbody>
</table>
<p>Next I try to find out how the Gini index connects to unemployment rate. At first I need to make sure all 10 districts are included in this data set. Then the data is grouped by two categories, one is month, another is name of district. Let&rsquo;s examine the unemployment rate by month for each district. The code to plot this graph is as following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>df_rate <span style="color:#f92672">=</span> df_rate<span style="color:#f92672">.</span>drop([<span style="color:#e6db74">&#39;Nom_Barri&#39;</span>,<span style="color:#e6db74">&#39;Any&#39;</span>,<span style="color:#e6db74">&#39;Codi_Districte&#39;</span>], axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>df_rate_agg_month <span style="color:#f92672">=</span> df_rate<span style="color:#f92672">.</span>groupby([<span style="color:#e6db74">&#39;Nom_Districte&#39;</span>,<span style="color:#e6db74">&#39;Mes&#39;</span>])<span style="color:#f92672">.</span>agg(<span style="color:#e6db74">&#39;mean&#39;</span>)<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>df_rate_agg_month
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">16</span>,<span style="color:#ae81ff">7</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;Unemployment rate across 10 distrcts of BCN each month in 2019&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">22</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Month&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Unemployment rate&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>ax <span style="color:#f92672">=</span> sns<span style="color:#f92672">.</span>lineplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Mes&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Pes_atur&#39;</span>, data <span style="color:#f92672">=</span> df_rate_agg_month, hue<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nom_Districte&#39;</span>, linewidth <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>move_legend(ax, <span style="color:#e6db74">&#34;upper left&#34;</span>, bbox_to_anchor<span style="color:#f92672">=</span>(<span style="color:#ae81ff">1</span>, <span style="color:#ae81ff">1</span>))
</span></span></code></pre></div><p>And the result is:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/linegraph_unem.png" alt="&amp;ldquo;Linegraph of Unemployment dataset&amp;rdquo;" title="Linegraph of Unemployment dataset"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Linegraph of Unemployment dataset</em></td>
</tr>
</tbody>
</table>
<p>For most districts, unemployment rate decrease to lowest in June and July, which suggests that more people are hired during this period, possibly because of the tourism season. Another thing worth notice is the district with lowest unemployment rate is Sarri√†-Sant Gervasi, which also possess the highest Gini index. It seems there is some correlation between these two, so let&rsquo;s delve in.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>df_rate_agg_mean <span style="color:#f92672">=</span> df_rate<span style="color:#f92672">.</span>groupby(<span style="color:#e6db74">&#39;Nom_Districte&#39;</span>)<span style="color:#f92672">.</span>agg(<span style="color:#e6db74">&#39;mean&#39;</span>)<span style="color:#f92672">.</span>reset_index()
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>merge(df_gini_agg, df_rate_agg_mean, on<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Nom_Districte&#39;</span>)
</span></span><span style="display:flex;"><span>result <span style="color:#f92672">=</span> result<span style="color:#f92672">.</span>drop([<span style="color:#e6db74">&#39;Codi_Barri&#39;</span>,<span style="color:#e6db74">&#39;Poblacio_16_64_anys&#39;</span>,<span style="color:#e6db74">&#39;Seccio_Censal&#39;</span>],axis<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>figure(figsize<span style="color:#f92672">=</span>(<span style="color:#ae81ff">14</span>,<span style="color:#ae81ff">7</span>))
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>title(<span style="color:#e6db74">&#39;relationship between index gini and unemployment rate&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">22</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>scatterplot(data<span style="color:#f92672">=</span>result, x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Index_Gini&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Pes_atur&#39;</span>,color<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;r&#39;</span>)
</span></span><span style="display:flex;"><span>sns<span style="color:#f92672">.</span>regplot(x<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Index_Gini&#39;</span>, y<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Pes_atur&#39;</span>, data<span style="color:#f92672">=</span>result)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>xlabel(<span style="color:#e6db74">&#39;Index Gini&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span><span style="display:flex;"><span>plt<span style="color:#f92672">.</span>ylabel(<span style="color:#e6db74">&#39;Unemployment rate&#39;</span>, fontsize<span style="color:#f92672">=</span><span style="color:#ae81ff">15</span>)
</span></span></code></pre></div><p>Above codes bring me this graph:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="/graphs/gini_unem.png" alt="&amp;ldquo;Correlation between gini and unemployment rate&amp;rdquo;" title="Correlation between gini and unemployment rate"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><em>Correlation between Gini_index and Unemployment rate</em></td>
</tr>
</tbody>
</table>
<p>Seems there is a negative correlation between these two factors. This discovery is actually the opposite of what i thought. Maybe high Gini index means more rich people, thus they provide more employment opportunities for jobseekers. Now I need to turn to the aspect of education, to find out if it also plays a role in affecting the unemployment rate.(To be continued)</p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
        <item>
            <title>Regular expression in dealing with datetime</title>
            <link>https://espe0606.github.io/posts/2022/11/regular-expression-in-dealing-with-datetime/</link>
            <pubDate>Wed, 30 Nov 2022 15:54:56 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/11/regular-expression-in-dealing-with-datetime/</guid>
            <description>Last week I encountered a medical dataset that has multiple types of date time format. My task is to correctly identify all of the different date variants encoded in this dataset and to properly normalize and sort the dates.
Some of the variants are like this:
* 04/20/2009; 04/20/09; 4/20/09; 4/3/09 * Mar-20-2009; Mar 20, 2009; March 20, 2009; Mar. 20, 2009; Mar 20 2009; * 20 Mar 2009; 20 March 2009; 20 Mar.</description>
            <content type="html"><![CDATA[<p>Last week I encountered a medical dataset that has multiple types of date time format. My task is to correctly identify all of the different date variants encoded in this dataset and to properly normalize and sort the dates.</p>
<p>Some of the variants are like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#f92672">*</span> <span style="color:#ae81ff">04</span><span style="color:#f92672">/</span><span style="color:#ae81ff">20</span><span style="color:#f92672">/</span><span style="color:#ae81ff">2009</span>; <span style="color:#ae81ff">04</span><span style="color:#f92672">/</span><span style="color:#ae81ff">20</span><span style="color:#f92672">/</span><span style="color:#ae81ff">09</span>; <span style="color:#ae81ff">4</span><span style="color:#f92672">/</span><span style="color:#ae81ff">20</span><span style="color:#f92672">/</span><span style="color:#ae81ff">09</span>; <span style="color:#ae81ff">4</span><span style="color:#f92672">/</span><span style="color:#ae81ff">3</span><span style="color:#f92672">/</span><span style="color:#ae81ff">09</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span> Mar<span style="color:#f92672">-</span><span style="color:#ae81ff">20</span><span style="color:#f92672">-</span><span style="color:#ae81ff">2009</span>; Mar <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">2009</span>; March <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">2009</span>;  Mar<span style="color:#f92672">.</span> <span style="color:#ae81ff">20</span>, <span style="color:#ae81ff">2009</span>; Mar <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">2009</span>;
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span> <span style="color:#ae81ff">20</span> Mar <span style="color:#ae81ff">2009</span>; <span style="color:#ae81ff">20</span> March <span style="color:#ae81ff">2009</span>; <span style="color:#ae81ff">20</span> Mar<span style="color:#f92672">.</span> <span style="color:#ae81ff">2009</span>; <span style="color:#ae81ff">20</span> March, <span style="color:#ae81ff">2009</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span> Mar <span style="color:#ae81ff">20</span>th, <span style="color:#ae81ff">2009</span>; Mar <span style="color:#ae81ff">21</span>st, <span style="color:#ae81ff">2009</span>; Mar <span style="color:#ae81ff">22</span>nd, <span style="color:#ae81ff">2009</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span> Feb <span style="color:#ae81ff">2009</span>; Sep <span style="color:#ae81ff">2009</span>; Oct <span style="color:#ae81ff">2010</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span> <span style="color:#ae81ff">6</span><span style="color:#f92672">/</span><span style="color:#ae81ff">2008</span>; <span style="color:#ae81ff">12</span><span style="color:#f92672">/</span><span style="color:#ae81ff">2009</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">*</span> <span style="color:#ae81ff">2009</span>; <span style="color:#ae81ff">2010</span>
</span></span></code></pre></div><p>There are several rules that I need to follow:</p>
<ul>
<li>Assume all dates in xx/xx/xx format are mm/dd/yy</li>
<li>Assume all dates where year is encoded in only two digits are years from the 1900&rsquo;s (e.g. 1/5/89 is January 5th, 1989)</li>
<li>If the day is missing (e.g. 9/2009), assume it is the first day of the month (e.g. September 1, 2009).</li>
<li>If the month is missing (e.g. 2010), assume it is the first of January of that year (e.g. January 1, 2010).</li>
<li>Watch out for potential typos as this is a raw, real-life derived dataset.</li>
</ul>
<p>Firstly we need to import a few modules and convert the <code>txt</code> file to <code>pd.DataFrame</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#f92672">import</span> numpy <span style="color:#66d9ef">as</span> np
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> dateutil.parser
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> pandas <span style="color:#66d9ef">as</span> pd
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> re
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>doc <span style="color:#f92672">=</span> []
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;dates.txt&#39;</span>) <span style="color:#66d9ef">as</span> file:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> file:
</span></span><span style="display:flex;"><span>        doc<span style="color:#f92672">.</span>append(line)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>df <span style="color:#f92672">=</span> pd<span style="color:#f92672">.</span>Series(doc)
</span></span></code></pre></div><p>Module <code>dateutil.parser</code> is used to convert strings to datetime objects.</p>
<p>Now we need to find out all date formats that belong to different categories. Regular expression is very handy for this kind of task</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>df <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>lower()
</span></span><span style="display:flex;"><span>lst1 <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;(\d{1,2}[-/]\d{1,2}[-/](?:\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">|\d</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">))&#39;</span>)
</span></span><span style="display:flex;"><span>lst2 <span style="color:#f92672">=</span>  df<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;(\d</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">\s(?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*(?:\.\s|,\s|\s)\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">)&#39;</span>)
</span></span><span style="display:flex;"><span>lst3 <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;((?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*(?:-|\s|\.\s)\d</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">(?:,\s|\s|-)\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">)&#39;</span>)            
</span></span><span style="display:flex;"><span>lst4 <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;((?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)[a-z]*(?:\.\s|,\s|\s)\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">)&#39;</span>)
</span></span><span style="display:flex;"><span>lst5 <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;(\d{1,2}/\d</span><span style="color:#e6db74">{4}</span><span style="color:#e6db74">)&#39;</span>)
</span></span><span style="display:flex;"><span>lst6 <span style="color:#f92672">=</span> df<span style="color:#f92672">.</span>str<span style="color:#f92672">.</span>findall(<span style="color:#e6db74">r</span><span style="color:#e6db74">&#39;((?:19|20)\d</span><span style="color:#e6db74">{2}</span><span style="color:#e6db74">)&#39;</span>)
</span></span></code></pre></div><p><code>lst1</code> finds date in form like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#ae81ff">0</span>      [<span style="color:#ae81ff">03</span><span style="color:#f92672">/</span><span style="color:#ae81ff">25</span><span style="color:#f92672">/</span><span style="color:#ae81ff">93</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>       [<span style="color:#ae81ff">6</span><span style="color:#f92672">/</span><span style="color:#ae81ff">18</span><span style="color:#f92672">/</span><span style="color:#ae81ff">85</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>        [<span style="color:#ae81ff">7</span><span style="color:#f92672">/</span><span style="color:#ae81ff">8</span><span style="color:#f92672">/</span><span style="color:#ae81ff">71</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">3</span>       [<span style="color:#ae81ff">9</span><span style="color:#f92672">/</span><span style="color:#ae81ff">27</span><span style="color:#f92672">/</span><span style="color:#ae81ff">75</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4</span>        [<span style="color:#ae81ff">2</span><span style="color:#f92672">/</span><span style="color:#ae81ff">6</span><span style="color:#f92672">/</span><span style="color:#ae81ff">96</span>]
</span></span></code></pre></div><p><code>lst2</code> finds date form as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#ae81ff">125</span>      [<span style="color:#ae81ff">24</span> jan <span style="color:#ae81ff">2001</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">126</span>      [<span style="color:#ae81ff">10</span> sep <span style="color:#ae81ff">2004</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">127</span>      [<span style="color:#ae81ff">26</span> may <span style="color:#ae81ff">1982</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">128</span>     [<span style="color:#ae81ff">28</span> june <span style="color:#ae81ff">2002</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">129</span>      [<span style="color:#ae81ff">06</span> may <span style="color:#ae81ff">1972</span>]
</span></span></code></pre></div><p><code>lst3</code> finds date form like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#ae81ff">194</span>        [april <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">1990</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">195</span>          [may <span style="color:#ae81ff">30</span>, <span style="color:#ae81ff">2001</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">196</span>          [feb <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">1994</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">197</span>     [february <span style="color:#ae81ff">18</span>, <span style="color:#ae81ff">1981</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">198</span>     [october<span style="color:#f92672">.</span> <span style="color:#ae81ff">11</span>, <span style="color:#ae81ff">2013</span>]
</span></span></code></pre></div><p><code>lst4</code> finds date form as:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#ae81ff">228</span>    [september <span style="color:#ae81ff">1985</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">229</span>         [june <span style="color:#ae81ff">2011</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">230</span>          [may <span style="color:#ae81ff">1986</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">231</span>          [may <span style="color:#ae81ff">2016</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">232</span>         [july <span style="color:#ae81ff">1977</span>]
</span></span></code></pre></div><p><code>lst5</code> is similar as <code>lst4</code>, both only contain year and month:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#ae81ff">343</span>     [<span style="color:#ae81ff">6</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1998</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">344</span>     [<span style="color:#ae81ff">6</span><span style="color:#f92672">/</span><span style="color:#ae81ff">2005</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">345</span>    [<span style="color:#ae81ff">10</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1973</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">346</span>     [<span style="color:#ae81ff">9</span><span style="color:#f92672">/</span><span style="color:#ae81ff">2005</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">347</span>    [<span style="color:#ae81ff">03</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1980</span>]
</span></span></code></pre></div><p><code>lst6</code> finds dates that only have years:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#ae81ff">455</span>    [<span style="color:#ae81ff">1984</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">456</span>    [<span style="color:#ae81ff">2000</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">457</span>    [<span style="color:#ae81ff">2001</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">458</span>    [<span style="color:#ae81ff">1982</span>]
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">459</span>    [<span style="color:#ae81ff">1998</span>]
</span></span></code></pre></div><p>Remember we have some rules to follow, the final date form has to include<code>date,month,year</code>. I defined specialized functions to transform dates in <code>lst4, lst5 and lst6</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add_m_d</span>(value):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;January 1 &#34;</span><span style="color:#f92672">+</span>value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add_d1</span>(value):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> value[:<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>]<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;1/&#39;</span><span style="color:#f92672">+</span>value[<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>:]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add_d2</span>(value):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> value[:<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>]<span style="color:#f92672">+</span><span style="color:#e6db74">&#39; 1, &#39;</span><span style="color:#f92672">+</span>value[<span style="color:#f92672">-</span><span style="color:#ae81ff">4</span>:]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">add_19</span>(value):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> len(value) <span style="color:#f92672">==</span> <span style="color:#ae81ff">8</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> value[:<span style="color:#ae81ff">6</span>]<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;19&#39;</span><span style="color:#f92672">+</span>value[<span style="color:#ae81ff">6</span>:]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> len(value) <span style="color:#f92672">==</span> <span style="color:#ae81ff">7</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> value[:<span style="color:#ae81ff">5</span>]<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;19&#39;</span><span style="color:#f92672">+</span>value[<span style="color:#ae81ff">5</span>:]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">elif</span> len(value) <span style="color:#f92672">==</span> <span style="color:#ae81ff">6</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> value[:<span style="color:#ae81ff">4</span>]<span style="color:#f92672">+</span><span style="color:#e6db74">&#39;19&#39;</span><span style="color:#f92672">+</span>value[<span style="color:#ae81ff">4</span>:]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> value
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">date_parser</span>(value):
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> dateutil<span style="color:#f92672">.</span>parser<span style="color:#f92672">.</span>parse(value)<span style="color:#f92672">.</span>strftime(<span style="color:#e6db74">&#34;%Y-%m-</span><span style="color:#e6db74">%d</span><span style="color:#e6db74">&#34;</span>)
</span></span></code></pre></div><p>Function <code>date_parser</code> is to convert all forms of date into single one <code>Year-Month-Day</code>. Then <code>df.sort_values</code> sorted all date from the earliest to the latest.
The final form is as following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Python" data-lang="Python"><span style="display:flex;"><span>     date
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">9</span>	<span style="color:#ae81ff">1971</span><span style="color:#f92672">-</span><span style="color:#ae81ff">04</span><span style="color:#f92672">-</span><span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">84</span>	<span style="color:#ae81ff">1971</span><span style="color:#f92672">-</span><span style="color:#ae81ff">05</span><span style="color:#f92672">-</span><span style="color:#ae81ff">18</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>	<span style="color:#ae81ff">1971</span><span style="color:#f92672">-</span><span style="color:#ae81ff">07</span><span style="color:#f92672">-</span><span style="color:#ae81ff">08</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">53</span>	<span style="color:#ae81ff">1971</span><span style="color:#f92672">-</span><span style="color:#ae81ff">07</span><span style="color:#f92672">-</span><span style="color:#ae81ff">11</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">28</span>	<span style="color:#ae81ff">1971</span><span style="color:#f92672">-</span><span style="color:#ae81ff">09</span><span style="color:#f92672">-</span><span style="color:#ae81ff">12</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>	<span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">231</span>	<span style="color:#ae81ff">2016</span><span style="color:#f92672">-</span><span style="color:#ae81ff">05</span><span style="color:#f92672">-</span><span style="color:#ae81ff">01</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">141</span>	<span style="color:#ae81ff">2016</span><span style="color:#f92672">-</span><span style="color:#ae81ff">05</span><span style="color:#f92672">-</span><span style="color:#ae81ff">30</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">186</span>	<span style="color:#ae81ff">2016</span><span style="color:#f92672">-</span><span style="color:#ae81ff">10</span><span style="color:#f92672">-</span><span style="color:#ae81ff">13</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">161</span>	<span style="color:#ae81ff">2016</span><span style="color:#f92672">-</span><span style="color:#ae81ff">10</span><span style="color:#f92672">-</span><span style="color:#ae81ff">19</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">413</span>	<span style="color:#ae81ff">2016</span><span style="color:#f92672">-</span><span style="color:#ae81ff">11</span><span style="color:#f92672">-</span><span style="color:#ae81ff">01</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">500</span> rows <span style="color:#960050;background-color:#1e0010">√ó</span> <span style="color:#ae81ff">1</span> columns
</span></span></code></pre></div><script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
        <item>
            <title>My first post</title>
            <link>https://espe0606.github.io/posts/2022/11/my-first-post/</link>
            <pubDate>Tue, 29 Nov 2022 14:31:41 +0100</pubDate>
            
            <guid>https://espe0606.github.io/posts/2022/11/my-first-post/</guid>
            <description>Hello, welcome to my blog!!
My name is Ryan, now living in Barcelona. Previously I worked in Financial sector, especially in PE&amp;amp;VC for more than 10 years, then I wrote a book and got it published in mainland China and HongKong. Now I worked as a freelancer data scientist and will be an enthusiast of A.I and machine learning in the future.
Since most of my time will be dedicated to learn data science, machine learning and neural networks, this blog will be mainly utilized to record my study progress and some interesting topics.</description>
            <content type="html"><![CDATA[<p>Hello, welcome to my blog!!</p>
<p>My name is Ryan, now living in Barcelona. Previously I worked in Financial sector, especially in PE&amp;VC for more than 10 years, then I wrote a book and got it published in mainland China and HongKong. Now I worked as a freelancer data scientist and will be an enthusiast of A.I and machine learning in the future.</p>
<p>Since most of my time will be dedicated to learn data science, machine learning and neural networks, this blog will be mainly utilized to record my study progress and some interesting topics.</p>
<p>Most skills, including writing, need to be polished frequently, or they will fade into nothing, like they never belong to you.</p>
<p>This blog is built upon Hugo and Github, love them.</p>
<script src="https://utteranc.es/client.js"
        repo="espe0606/comment_sys"
        issue-term="pathname"
        theme="preferred-color-scheme"
        crossorigin="anonymous"
        async>
</script>
]]></content>
        </item>
        
    </channel>
</rss>
